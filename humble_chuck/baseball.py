"""Modeling the MLB Stats API"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_baseball.ipynb.

# %% auto 0
__all__ = ['Game']

# %% ../nbs/08_baseball.ipynb 19
def create_enum_with_descriptions(name: str, id_to_description: dict[str, str]) -> Type[Enum]:
    """Dynamically create a str Enum with attached description attribute for each value."""
    def __new__(cls, value):
        obj = str.__new__(cls, value)
        obj._value_ = value
        obj.description = id_to_description[value]
        return obj

    namespace = {"__new__": __new__}

    # Add enum members from dict keys
    for key, desc in id_to_description.items():
        member_name = desc.upper().replace(" ", "_").replace("-", "_")
        namespace[member_name] = key

    return Enum(name, namespace, type=str)

# %% ../nbs/08_baseball.ipynb 20
game_type_map = {
    'S': 'Spring Training',
    'R': 'Regular Season',
    'F': 'Wild Card',
    'D': 'Division Series',
    'L': 'League Championship Series',
    'W': 'World Series',
    'C': 'Championship',
    'N': 'Nineteenth Century Series',
    'P': 'Playoffs',
    'A': 'All-Star Game',
    'I': 'Intrasquad',
    'E': 'Exhibition',
}

gameday_type_map = {'P': 'Premium Gameday - 3D Pitch tracking and Premium product experience',
 'E': 'Enhanced Gameday - 3D Pitch tracking',
 'Y': 'Regular Gameday - Pitch by Pitch',
 'D': 'No Gameday - Pitch by Pitch',
 'N': 'No Gameday - Play by Play level data only',
 'L': 'No Gameday - Linescore level data',
 'B': 'No Gameday - PG / Box Score level data only',
 'S': 'No Gameday - Score / Game Result level data only'}

# %% ../nbs/08_baseball.ipynb 21
GameType = create_enum_with_descriptions("GameType", game_type_map)
GameDayType = create_enum_with_descriptions("GameDayType",gameday_type_map)

# %% ../nbs/08_baseball.ipynb 22
class Game(BaseModel):
    """ Model for GameData -> Game Response"""
    pk: int
    type: GameType
    doubleHeader: bool
    id: str
    gamedayType: GameDayType
    tiebreaker: bool
    gameNumber: int
    calendarEventID: str
    season: str
    seasonDisplay: str

    
