# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_display.ipynb.

# %% auto 0
__all__ = ['custom_show', 'PydanticAwareRenderer']

# %% ../nbs/05_display.ipynb 2
from plotly import graph_objects as go

# %% ../nbs/05_display.ipynb 3
def custom_show(
    fig:go.Figure,
    filename:str = None
):
    """ A custom version of the `show` method of a Plotly Figure. 
    
    - Removes the Plotly logo from the display
    - Downloaded plots are higher quality 'SVG' format
    - Allows you to pass 'filename' argument to customize the name of the downloaded file 
    """
    config = {
      'toImageButtonOptions': {
        'format': 'svg', # one of png, svg, jpeg, webp
        'scale': 1 # Multiply title/legend/axis/canvas sizes by this factor
      },
        'displaylogo':False
        
    }

    if filename:
        config['toImageButtonOptions']['filename']=filename
    fig.show(config=config)


# %% ../nbs/05_display.ipynb 8
from nbdev.showdoc import BasicMarkdownRenderer,ShowDocRenderer
from pydantic import BaseModel
from pydantic_settings import BaseSettings
import inspect

# %% ../nbs/05_display.ipynb 9
class PydanticAwareRenderer(BasicMarkdownRenderer):
    def render(self):
        if inspect.isclass(self.sym) and issubclass(self.sym, BaseModel):
            schema = self.sym.model_json_schema()
            md = "\n".join(
                self.render_fields_table(schema)
                + self.render_defs_tables(schema)
            )
            # Return markdown for nbdev to place; do not mutate self.docs here
            return md
        else:
            return ''


    def render_fields_table(self, schema):
        lines = ["*", "\n**Fields:**\n"]
        lines.append("| Name | Type | Required | Default | Description |")
        lines.append("|------|------|----------|---------|-------------|")
        required_fields = set(schema.get("required", []))

        for field_name, field_info in schema.get("properties", {}).items():
            if "$ref" in field_info:
                ref_name = field_info["$ref"].split("/")[-1]
                lines.append(f"| {field_name} | {ref_name} | {field_name in required_fields} | - | (Nested Model) |")
            else:
                field_type = field_info.get("type", "")
                description = field_info.get("description", "")
                default = field_info.get("default", "")
                lines.append(f"| {field_name} | {field_type} | {field_name in required_fields} | {default} | {description} |")

        lines.append("")  # Blank line between tables
        return lines

    def render_defs_tables(self, schema):
        defs = schema.get("$defs", {})
        lines = []

        for def_name, def_schema in defs.items():
            lines.append(f"\n**$defs â†’ {def_name}**\n")
            lines.append("| Name | Type | Required | Default | Description |")
            lines.append("|------|------|----------|---------|-------------|")
            required_fields = set(def_schema.get("required", []))

            for field_name, field_info in def_schema.get("properties", {}).items():
                field_type = field_info.get("type", "")
                description = field_info.get("description", "")
                default = field_info.get("default", "")
                lines.append(f"| {field_name} | {field_type} | {field_name in required_fields} | {default} | {description} |")

            lines.append("")  # Blank line after each defs table

        return lines
    def _repr_markdown_(self):
        return super()._repr_markdown_() + self.render()

    __repr__ = __str__ = _repr_markdown_
