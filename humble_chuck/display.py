# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_display.ipynb.

# %% auto 0
__all__ = ['custom_show', 'PydanticAwareRenderer']

# %% ../nbs/05_display.ipynb 2
from plotly import graph_objects as go

# %% ../nbs/05_display.ipynb 3
def custom_show(
    fig:go.Figure,
    filename:str = None
):
    """ A custom version of the `show` method of a Plotly Figure. 
    
    - Removes the Plotly logo from the display
    - Downloaded plots are higher quality 'SVG' format
    - Allows you to pass 'filename' argument to customize the name of the downloaded file 
    """
    config = {
      'toImageButtonOptions': {
        'format': 'svg', # one of png, svg, jpeg, webp
        'scale': 1 # Multiply title/legend/axis/canvas sizes by this factor
      },
        'displaylogo':False
        
    }

    if filename:
        config['toImageButtonOptions']['filename']=filename
    fig.show(config=config)


# %% ../nbs/05_display.ipynb 9
from nbdev.showdoc import BasicMarkdownRenderer
from pydantic import BaseModel
import inspect

# %% ../nbs/05_display.ipynb 10
class PydanticAwareRenderer(BasicMarkdownRenderer):
    def render(self):
        if inspect.isclass(self.sym) and issubclass(self.sym, BaseModel):
            self._repr_markdown_()
            self.docs +=self.render_pydantic_model(self.sym.schema())
            return self.render_pydantic_model(self.sym.schema())
        else:
            return super().render()

    def render_pydantic_model(self, schema, title=None, depth=0):
        indent = "  " * depth
        lines = ['*', '']

        # if title:
        #     lines.append(f"{indent}#### {title}")
        # if depth == 0:
        #     lines.append(f"### {self.sym.__name__}")
        
        lines.append(f"{indent}**Fields:**\n")
        lines.append(f"{indent}| Name | Type | Required | Default | Description |")
        lines.append(f"{indent}|------|------|----------|---------|-------------|")

        references = []
        for field_name, field_info in schema.get('properties', {}).items():
            # Detect if field is a $ref to another schema definition
            if '$ref' in field_info:
                ref_name = field_info['$ref'].split('/')[-1]
                ref_schema = schema.get('$defs', {}).get(ref_name)

                if ref_schema:
                    lines.append(f"{indent}| {field_name} | {ref_name} | True | - | (Nested Model) |")
                    # Recurse into the referenced schema
                    lines.append(self.render_pydantic_model(ref_schema, title=ref_name, depth=depth+1))
                else:
                    lines.append(f"{indent}| {field_name} | UnknownRef | True | - | (Missing Definition) |")
            else:
                field_type = field_info.get('type', '')
                description = field_info.get('description', '')
                required = field_name in schema.get('required', [])
                default = field_info.get('default', '')
                lines.append(f"{indent}| {field_name} | {field_type} | {required} | {default} | {description} |")

        return "\n".join(lines)

    __repr__ = __str__ = render
