[
  {
    "objectID": "delegates.html",
    "href": "delegates.html",
    "title": "Delegation",
    "section": "",
    "text": "This function is adapted from this brilliant blog post by Jeremy Howard that outlines the advantages of delegation in Python. Jeremy Howard is a Python idol of mine for his work on such libraries as nbdev, fastai, and more recently, FastHTML.\nsource",
    "crumbs": [
      "Resume",
      "Delegation"
    ]
  },
  {
    "objectID": "delegates.html#example",
    "href": "delegates.html#example",
    "title": "Delegation",
    "section": "Example",
    "text": "Example\n\nfrom nbdev.showdoc import show_doc\n\ndef say_hi(\n    name:str \n):\n    return f\"Hi! my name is {name}.\"\n\nshow_doc(say_hi)\n\n\nsay_hi\n\n say_hi (name:str)\n\n\n\n\nbreak_the_ice\n\n break_the_ice (fun_fact:str, name:str)\n\n\n\nCommon Parameters\n\nUse a pydnatic model to establish common parameters accross multiple funcs.\n\n\nfrom humble_chuck.models import BaseModel\nimport requests\n\n\n\n\nhit_api\n\n hit_api (url, limit:int, offset:int, body:dict)",
    "crumbs": [
      "Resume",
      "Delegation"
    ]
  },
  {
    "objectID": "display.html",
    "href": "display.html",
    "title": "display",
    "section": "",
    "text": "source",
    "crumbs": [
      "Resume",
      "display"
    ]
  },
  {
    "objectID": "display.html#custom-doc-renderer",
    "href": "display.html#custom-doc-renderer",
    "title": "display",
    "section": "Custom Doc Renderer",
    "text": "Custom Doc Renderer\n\nCustom show_doc renderer to be used by nbdev that supports Pydantic Models\n\n\nsource\n\nPydanticAwareRenderer\n\n PydanticAwareRenderer (sym, name:str|None=None, title_level:int=3)\n\nMarkdown renderer for show_doc\n\nfrom nbdev.showdoc import show_doc\nfrom pydantic import BaseModel,Field\nfrom humble_chuck.models import BaseModel\n\n\nclass MyPydanticModel(BaseModel):\n    \"\"\"A Basic Pydnatic model\"\"\"\n    name: str = Field(description=\"A basic string filed called `name`\")\n    number: int\n\nShow doc with custom render:\n\n\n\nMyPydanticModel\n\n MyPydanticModel (name:str, number:int)\n\n*A Basic Pydnatic model**\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\nname\nstring\nTrue\n\nA basic string filed called name\n\n\nnumber\ninteger\nTrue\n\n\n\n\n\n\nclass ModelWithModel(BaseModel):\n    \"\"\" A Model within a Model \"\"\"\n    my_model: MyPydanticModel = Field(description=\"Description for nested model\")\n    other: dict = None\n\n\n\n\nModelWithModel\n\n ModelWithModel (my_model:__main__.MyPydanticModel, other:dict=None)\n\n*A Model within a Model**\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\nmy_model\nMyPydanticModel\nTrue\n-\n(Nested Model)\n\n\nother\nobject\nFalse\nNone\n\n\n\n\n$defs → MyPydanticModel\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\nname\nstring\nTrue\n\nA basic string filed called name\n\n\nnumber\ninteger\nTrue\n\n\n\n\n\n\nclass Model(BaseModel):\n    pass\n\nclass MoreModels(Model):\n    \"\"\"Models within Models within Models\"\"\"\n    integer: int \n    my_model: MyPydanticModel\n    my_model_with_model: ModelWithModel\n\n\n\n\nModel\n\n Model ()\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.**\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\n\n\n\n\nMoreModels\n\n MoreModels (integer:int, my_model:__main__.MyPydanticModel,\n             my_model_with_model:__main__.ModelWithModel)\n\n*Models within Models within Models**\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\ninteger\ninteger\nTrue\n\n\n\n\nmy_model\nMyPydanticModel\nTrue\n-\n(Nested Model)\n\n\nmy_model_with_model\nModelWithModel\nTrue\n-\n(Nested Model)\n\n\n\n$defs → ModelWithModel\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\nmy_model\n\nTrue\n\nDescription for nested model\n\n\nother\nobject\nFalse\nNone\n\n\n\n\n$defs → MyPydanticModel\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\nname\nstring\nTrue\n\nA basic string filed called name\n\n\nnumber\ninteger\nTrue\n\n\n\n\n\n\n!nbdev_export",
    "crumbs": [
      "Resume",
      "display"
    ]
  },
  {
    "objectID": "dependency.html",
    "href": "dependency.html",
    "title": "Dependency",
    "section": "",
    "text": "The Setup\nIn one of my previous roles, my team was required to produce multiple PDF reports on various schedules. We had various python functions that produced data for these reports, and some functions produced data that would be re-used in other sections. So for example, function_a produces table_a, and function_b uses table_a to produce table_b. function_c also uses table_a but produces a different result.\nAs we developed these dependant functions, we wanted to be sure that the entire dependency tree worked. But when they ran in production, we didn’t want to constantly re-run the same function over and over again. Especially if there is up-to-the-minute data involved that might change slighly throughout the course of the report generation.\nThe Goal\nWe wanted a pattern that would allow us to write a dependent function that, when called, could either produce the dependency or retrieve it from state.\nFrom our earlier example: - function_b is the dependent (because it depends on the result of function_a), - function_a is the dependency (because function_b relies on it). - function_c is also a dependent of function_a\nWhen called, function_b will automatically generate the results of function_a. Later, when function_c is called, it will recall the result of function_a from state to avoid using different inputs than funtion_b and increase performance.\nThe Result\nA Dependency object with a mapping of argument names -&gt; dependency functions. Dependencies are defined in a function signature using type annotations, and functions that use this dependency structure will have a decorator to impliment this pattern.\n\nsource\n\ndepends_on\n\n depends_on (**functions:Callable)\n\nDynamically creates a new subclass of Dependency with the depends_on dict set to the given functions. This allows for named dependencies.\n\nsource\n\n\nDependency\n\n Dependency ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nimport pandas as pd\n\n\n# Sample function to return a dummy DataFrame\ndef create_dummy_frame(*args):\n    return pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\n\n# Using validate_call for input validation\n@validate_call\ndef double_dummy(\n    data: depends_on(dummy_data=create_dummy_frame)\n):\n    assert data['dummy_data'].equals(create_dummy_frame())\n    return data['dummy_data'] * 2\n\n\n# Example of calling the function where create_dummy_frame is called by the validator\ntry:\n    result = double_dummy({})\n    print(result)\nexcept ValidationError as e:\n    print(e)\n\n2025-09-02 14:59:17,771 - __main__ - INFO - validating: create_dummy_frame as dummy_data\n\n\n   a   b\n0  2   8\n1  4  10\n2  6  12\n\n\n\n# or you can pass the data yourself\ndouble_dummy(\n    data={'dummy_data':create_dummy_frame()}\n)\n\n2025-09-02 14:59:17,774 - __main__ - INFO - retrieving dummy_data from state.\n\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n2\n8\n\n\n1\n4\n10\n\n\n2\n6\n12\n\n\n\n\n\n\n\n\n@validate_call\ndef call_both(data:depends_on(\n    dummy_data=create_dummy_frame,\n    double=double_dummy\n)):\n    return data\n\n\ncall_both(data={})\n\n2025-09-02 14:59:17,780 - __main__ - INFO - validating: create_dummy_frame as dummy_data\n2025-09-02 14:59:17,780 - __main__ - INFO - validating: double_dummy as double\n2025-09-02 14:59:17,781 - __main__ - INFO - retrieving dummy_data from state.\n\n\n{'dummy_data':    a  b\n 0  1  4\n 1  2  5\n 2  3  6,\n 'double':    a   b\n 0  2   8\n 1  4  10\n 2  6  12}\n\n\n\nfrom pydantic import BaseModel\n\n\nclass Model(BaseModel):\n    data: depends_on(dummy_data=create_dummy_frame,double=double_dummy)\n\n\nModel.model_json_schema()\n\n{'properties': {'data': {'additionalProperties': True,\n   'description': 'A custom Dependency type with named keys',\n   'title': 'Data',\n   'type': 'object'}},\n 'required': ['data'],\n 'title': 'Model',\n 'type': 'object'}\n\n\n\nModel(data={})\n\n2025-09-02 14:59:17,791 - __main__ - INFO - validating: create_dummy_frame as dummy_data\n2025-09-02 14:59:17,798 - __main__ - INFO - validating: double_dummy as double\n2025-09-02 14:59:17,801 - __main__ - INFO - retrieving dummy_data from state.\n\n\nModel(data={'dummy_data':    a  b\n0  1  4\n1  2  5\n2  3  6, 'double':    a   b\n0  2   8\n1  4  10\n2  6  12})\n\n\n\ndep = depends_on(dummy_data=create_dummy_frame,double=double_dummy)\ndep\n\n__main__.Dependency(dummy_data=create_dummy_frame, double=double_dummy)",
    "crumbs": [
      "Resume",
      "Dependency"
    ]
  },
  {
    "objectID": "projects/flow chart creator.html",
    "href": "projects/flow chart creator.html",
    "title": "Flow Chart Creator",
    "section": "",
    "text": "I saw this image and it inspired me to create a flow chart for what to do when you’re in a foul mood. So I took a screenshot, submitted it ChatGPT and asked it to create the flow chart. It did pretty well with a few tweaks, but I noticed a lot of repetetion, and defining each node and edge sequentially felt wrong. The the authoring of a flow chart graph did not represent the spirit of the image it was aiming to create. I was further disillusioned by the lack of interactive documentation in the otherwise wonderful Python implimentation of Graphviz. Using ‘attrs’ as keyword argument, forcing the user to lookup attribute names and types, leaves a lot to be desired, especially when working in Jupyter (see Jeremy Howard’s thoughts on the matter referenced in my ‘delegation’ implimentation).\nI want to create a generalized, reusable pattern to create flow charts using Graphviz using Pydantic to model, validate, and re-use keyword arguments. And I want the definition of the graph structure to more closely mirror the intended output.\n\nfrom graphviz import Digraph, Graph\nfrom typing import *\n\nLet’s start by looking at ChatGPT’s solution to creating a flowchart from our source image.\n\ndef create_foul_mood_flowchart():\n    # Initialize the flowchart\n    flowchart = Digraph(\"Foul Mood Guide\", format=\"svg\")\n    flowchart.attr(rankdir=\"TB\")\n\n    # Add nodes with positioning\n    flowchart.node(\"Start\", \"Are you hydrated?\", pos=\"0,0!\")\n    flowchart.node(\"HydrationYes\", \"Yes\", pos=\"1,-1!\", constraint=\"false\")\n    flowchart.node(\"HydrationNo\", \"No\", pos=\"-1,-1!\", constraint=\"false\")\n    flowchart.node(\"DrinkWater\", \"If not, have a glass of water.\", pos=\"-2,-2!\", constraint=\"false\")\n\n    flowchart.node(\"Eaten\", \"Have you eaten in the past 3 hours?\", pos=\"2,-2!\")\n    flowchart.node(\"EatenYes\", \"Yes\", pos=\"3,-3!\", constraint=\"false\")\n    flowchart.node(\"EatenNo\", \"No\", pos=\"1,-3!\", constraint=\"false\")\n    flowchart.node(\"EatFood\", \"If not, get some food with protein, not just carbs.\", pos=\"0,-4!\", constraint=\"false\")\n\n    flowchart.node(\"Showered\", \"Have you showered in the past day?\", pos=\"4,-4!\")\n    flowchart.node(\"ShoweredYes\", \"Yes\", pos=\"5,-5!\", constraint=\"false\")\n    flowchart.node(\"ShoweredNo\", \"No\", pos=\"3,-5!\", constraint=\"false\")\n    flowchart.node(\"TakeShower\", \"If not, take a shower now.\", pos=\"2,-6!\", constraint=\"false\")\n\n    flowchart.node(\"Stretched\", \"Have you stretched your legs in the past day?\", pos=\"6,-6!\")\n    flowchart.node(\"StretchedYes\", \"Yes\", pos=\"7,-7!\", constraint=\"false\")\n    flowchart.node(\"StretchedNo\", \"No\", pos=\"5,-7!\", constraint=\"false\")\n    flowchart.node(\"DoStretch\", \"If not, go for a walk or move around.\", pos=\"4,-8!\", constraint=\"false\")\n\n    # Add edges with diagonal placement\n    flowchart.edge(\"Start\", \"HydrationYes\", label=\"Yes\", constraint=\"true\")\n    flowchart.edge(\"Start\", \"HydrationNo\", label=\"No\", constraint=\"true\")\n    flowchart.edge(\"HydrationNo\", \"DrinkWater\")\n    flowchart.edge(\"HydrationYes\", \"Eaten\")\n\n    flowchart.edge(\"Eaten\", \"EatenYes\", label=\"Yes\")\n    flowchart.edge(\"Eaten\", \"EatenNo\", label=\"No\")\n    flowchart.edge(\"EatenNo\", \"EatFood\")\n    flowchart.edge(\"EatenYes\", \"Showered\")\n\n    flowchart.edge(\"Showered\", \"ShoweredYes\", label=\"Yes\")\n    flowchart.edge(\"Showered\", \"ShoweredNo\", label=\"No\")\n    flowchart.edge(\"ShoweredNo\", \"TakeShower\")\n    flowchart.edge(\"ShoweredYes\", \"Stretched\")\n\n    flowchart.edge(\"Stretched\", \"StretchedYes\", label=\"Yes\")\n    flowchart.edge(\"Stretched\", \"StretchedNo\", label=\"No\")\n    flowchart.edge(\"StretchedNo\", \"DoStretch\")\n    return flowchart\n\n\nfrom IPython.display import SVG\n\n\ngraph = create_foul_mood_flowchart()\ngraph.render('images/foulmood_flowchart',format='svg',)\nSVG('images/foulmood_flowchart.svg')\n\n\n\n\n\n\n\n\n\nfrom humble_chuck.models import BaseModel\nfrom pydantic import ConfigDict\n\nNow let’s model some of these attributes. Graphviz has 3 primary objects: graphs, nodes, and edges. There are also subgraphs and cluster but let’s get to that later. We’ll start with the edges.\nBut first, let’s create a BaseModel that we can use to define common characteristics of our sub-models.\n\nclass GraphVizModel(BaseModel):\n    \"BaseModel for GraphViz Pydantic models. Used to define common attributes for Graph, Node, and Edge.\"\n    model_config = ConfigDict(repr_kwargs = {'exclude_unset':True})\n    \n    fontsize: Optional[str] = None\n\n\nclass Edge(GraphVizModel):\n    tail_name: str\n    head_name: str\n    label: Optional[str] = None\n    # other edge attributes\n\nMoving on to a NodeModel.\n\nclass Node(GraphVizModel):\n    \"\"\"Node Model\"\"\"\n    name: str\n    label: str\n    pos: Optional[str] = None\n    constraint: Optional[bool] = None\n    # other attributes for graphviz nodes\n\n\nclass GraphModel(GraphVizModel):\n    type: Literal['graph','digraph']\n    name: str\n    format: Optional[str] = None\n    \n    nodes: List[Node]\n    edges: Optional[List[Edge]] = []\n\n    def make_graph(self):\n        graph_kwargs = self.model_dump(exclude={'nodes','edges'}) \n        if self.type == 'graph':\n            graph = Graph()\n        else:\n            graph = Digraph()\n        nodes_edges = self.model_dump(include={'nodes','edges'})\n        for node in nodes_edges['nodes']:\n            graph.node(**node)\n        for edge in nodes_edges['edges']:\n            graph.edge(**edge)\n        return graph\n\n\ngraph = GraphModel(\n    type='graph',\n    name='basic needs',\n    nodes = [\n        Node(name='eaten',label=\"Have you eaten?\",),\n        Node(name='eat',label='Eat you idiot!'),\n        Node(name='slept',label=\"Have you slept?\"),\n        Node(name='sleep',label='Go to bed!')\n    ],\n    edges = [\n        Edge(head_name='eat',tail_name='eaten',label='No'),\n        Edge(tail_name='eaten',head_name='slept',label='Yes'),\n        Edge(tail_name='slept',head_name='sleep'),\n        \n        \n    ]\n)\ndisplay(graph)\n\ngraph.make_graph()\n\n\n\n\n\n\n\n\ntype\ngraph\n\n\nname\nbasic needs\n\n\nnodes\n\n\n\nname\nlabel\n\n\n\n\neaten\nHave you eaten?\n\n\neat\nEat you idiot!\n\n\nslept\nHave you slept?\n\n\nsleep\nGo to bed!\n\n\n\n\n\nedges\n\n\n\n\ntail_name\neaten\n\n\nhead_name\neat\n\n\nlabel\nNo\n\n\n\n\n\n\ntail_name\neaten\n\n\nhead_name\nslept\n\n\nlabel\nYes\n\n\n\n\n\n\ntail_name\nslept\n\n\nhead_name\nsleep\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNot bad, but notice how different the definition and json representation of the graph are from the actual image. I would much prefer a hierarchal way of defining and modeling my basic needs flow chart. I would much rather have something like this:\nGraph(\n    Node(\n        name='have you eaten',\n        child_nodes={\n            'no':Node('eat'),\n            'yes':Node(\n                name ='have you slept'\n                child_nodes={'no':Node('sleep')}\n                )\n        }\n    )\n)\nSomething to consider:\nShould we have ‘child-nodes’ that are able to set their attribute relevant to the parent? I don’t see a way of doing this with Graphviz natively. If so, Node would have to be a self-refrencing model\n\nGraphviz Attributes\n\nimport pandas as pd\nfrom pydantic import Field,confloat,ConfigDict\nimport logging\n\n\nattributes = pd.read_html(\"https://graphviz.org/doc/info/attrs.html\")[0]\nattributes\n\ndef normalize_used_by(value):\n    as_list = [s.strip() for s in value.split(',')]\n    return '|'.join(x for x in sorted(as_list))\n    \nattributes['Used By'] = attributes['Used By'].apply(\n    lambda x: normalize_used_by(x)\n)\nattributes['Used By'].value_counts()\n\nUsed By\nGraphs                         74\nEdges                          43\nNodes                          18\nClusters|Edges|Graphs|Nodes    13\nClusters|Graphs                 6\nClusters|Edges|Nodes            4\nClusters|Graphs|Nodes           4\nGraphs|Nodes                    3\nEdges|Nodes                     3\nClusters|Nodes                  2\nEdges|Graphs|Nodes              2\nClusters|Subgraphs              1\nClusters|Edges|Graphs           1\nClusters                        1\nSubgraphs                       1\nName: count, dtype: int64\n\n\n\nshared_ix = attributes[\n    (attributes['Used By']=='Clusters|Edges|Graphs|Nodes')|(attributes['Used By']=='Edges|Graphs|Nodes')\n].index\nattributes.iloc[shared_ix]\n\n\n\n\n\n\n\n\nName\nUsed By\nType\nDefault\nMinimum\nDescription, notes\n\n\n\n\n10\nclass\nClusters|Edges|Graphs|Nodes\nstring\n\"\"\nNaN\nClassnames to attach to the node, edge, graph,...\n\n\n14\ncolorscheme\nClusters|Edges|Graphs|Nodes\nstring\n\"\"\nNaN\nA color scheme namespace: the context for inte...\n\n\n15\ncomment\nEdges|Graphs|Nodes\nstring\n\"\"\nNaN\nComments are inserted into output.\n\n\n36\nfontcolor\nClusters|Edges|Graphs|Nodes\ncolor\nblack\nNaN\nColor used for text.\n\n\n37\nfontname\nClusters|Edges|Graphs|Nodes\nstring\n\"Times-Roman\"\nNaN\nFont used for text.\n\n\n40\nfontsize\nClusters|Edges|Graphs|Nodes\ndouble\n14.0\n1.0\nFont size, in points, used for text.\n\n\n53\nhref\nClusters|Edges|Graphs|Nodes\nescString\n\"\"\nNaN\nSynonym for URL. map, postscript, svg only.\n\n\n54\nid\nClusters|Edges|Graphs|Nodes\nescString\n\"\"\nNaN\nIdentifier for graph objects. map, postscript,...\n\n\n61\nlabel\nClusters|Edges|Graphs|Nodes\nlblString\n\"\\N\" (nodes) \"\" (otherwise)\nNaN\nText label attached to objects.\n\n\n100\nnojustify\nClusters|Edges|Graphs|Nodes\nbool\nfalse\nNaN\nWhether to justify multiline text vs the previ...\n\n\n144\nshowboxes\nEdges|Graphs|Nodes\nint\n0\n0\nPrint guide boxes for debugging. dot only.\n\n\n152\nstyle\nClusters|Edges|Graphs|Nodes\nstyle\n\"\"\nNaN\nSet style information for components of the gr...\n\n\n162\ntarget\nClusters|Edges|Graphs|Nodes\nescString, string\n&lt;none&gt;\nNaN\nIf the object has a URL, this attribute determ...\n\n\n164\ntooltip\nClusters|Edges|Graphs|Nodes\nescString\n\"\"\nNaN\nTooltip (mouse hover text) attached to the nod...\n\n\n166\nURL\nClusters|Edges|Graphs|Nodes\nescString\n&lt;none&gt;\nNaN\nHyperlinks incorporated into device-dependent ...\n\n\n\n\n\n\n\n\n\nBase\n\nclass GraphVizBase(BaseModel):\n    model_config = ConfigDict(\n        populate_by_name=True,\n        repr_kwargs = {'exclude_defaults':True}\n    )\n    name: str \n\n    def __init__(self,name:str,**kwargs):\n        super().__init__(name=name,**kwargs)\n\n\n\nShared\n\nclass GraphVizAttributesBase(GraphVizBase):\n    \n    \n    class_: Optional[str] = Field(\n        default=None,\n        alias=\"class\",\n        description=\"Classnames to attach to the node, edge, graph, or cluster's SVG element. (SVG only)\",\n    )\n    colorscheme: Optional[str] = Field(\n        default=None,\n        description=\"A color scheme namespace: the context for interpreting color names.\",\n    )\n    comment: Optional[str] = Field(\n        default=None,\n        description=\"Comments are inserted into output.\",\n    )\n    fontcolor: Optional[str] = Field(\n        default=\"black\",\n        description=\"Color used for text.\",\n    )\n    fontname: Optional[str] = Field(\n        default=\"Times-Roman\",\n        description=\"Font used for text.\",\n    )\n    fontsize: Optional[Union[float,str]] = Field(\n        default=14.0,\n        ge=1.0,\n        description=\"Font size, in points, used for text.\",\n    )\n    href: Optional[str] = Field(\n        default=None,\n        description=\"Synonym for URL. (map, postscript, SVG only)\",\n    )\n    id: Optional[str] = Field(\n        default=None,\n        description=\"Identifier for graph objects. (map, postscript, SVG only)\",\n    )\n    label: Optional[str] = Field(\n        default=None,\n        description=\"Text label attached to objects. Defaults to '\\\\N' for nodes and empty otherwise.\",\n    )\n    nojustify: Optional[bool] = Field(\n        default=False,\n        description=\"Whether to justify multiline text relative to the previous text line (rather than the side of the container).\",\n    )\n    showboxes: Optional[int] = Field(\n        default=0,\n        ge=0,\n        description=\"Print guide boxes for debugging. (DOT only)\",\n    )\n    style: Optional[str] = Field(\n        default=None,\n        description=\"Set style information for components of the graph.\",\n    )\n    target: Optional[str] = Field(\n        default=None,\n        description=\"If the object has a URL, this attribute determines which window of the browser is used for the URL. (map, SVG only)\",\n    )\n    tooltip: Optional[str] = Field(\n        default=None,\n        description=\"Tooltip (mouse hover text) attached to the node, edge, cluster, or graph. (cmap, SVG only)\",\n    )\n    URL: Optional[str] = Field(\n        default=None,\n        description=\"Hyperlinks incorporated into device-dependent output. (map, postscript, SVG only)\",\n    )\n\n\nGraphVizAttributesBase('Name')\n\n\n\n\nname\nName\n\n\n\n\n\n\n\nEdge Attributes\n\nattributes[\n    (attributes['Used By'].str.contains('Edges'))&(attributes['Used By'].index.isin(shared_ix)==False)\n]\n\n\n\n\n\n\n\n\nName\nUsed By\nType\nDefault\nMinimum\nDescription, notes\n\n\n\n\n2\narrowhead\nEdges\narrowType\nnormal\nNaN\nStyle of arrowhead on the head node of an edge.\n\n\n3\narrowsize\nEdges\ndouble\n1.0\n0.0\nMultiplicative scale factor for arrowheads.\n\n\n4\narrowtail\nEdges\narrowType\nnormal\nNaN\nStyle of arrowhead on the tail node of an edge.\n\n\n13\ncolor\nClusters|Edges|Nodes\ncolor, colorList\nblack\nNaN\nBasic drawing color for graphics, not text.\n\n\n18\nconstraint\nEdges\nbool\ntrue\nNaN\nIf false, the edge is not used in ranking the ...\n\n\n20\ndecorate\nEdges\nbool\nfalse\nNaN\nWhether to connect the edge label to the edge ...\n\n\n24\ndir\nEdges\ndirType\nforward (directed) none (undirected)\nNaN\nEdge type for drawing arrowheads.\n\n\n28\nedgehref\nEdges\nescString\n\"\"\nNaN\nSynonym for edgeURL. map, svg only.\n\n\n29\nedgetarget\nEdges\nescString\n&lt;none&gt;\nNaN\nBrowser window to use for the edgeURL link. ma...\n\n\n30\nedgetooltip\nEdges\nescString\n\"\"\nNaN\nTooltip annotation attached to the non-label p...\n\n\n31\nedgeURL\nEdges\nescString\n\"\"\nNaN\nThe link for the non-label parts of an edge. m...\n\n\n34\nfillcolor\nClusters|Edges|Nodes\ncolor, colorList\nlightgrey (nodes) black (clusters)\nNaN\nColor used to fill the background of a node or...\n\n\n44\nhead_lp\nEdges\npoint\nNaN\nNaN\nCenter position of an edge's head label. write...\n\n\n45\nheadclip\nEdges\nbool\ntrue\nNaN\nIf true, the head of an edge is clipped to the...\n\n\n46\nheadhref\nEdges\nescString\n\"\"\nNaN\nSynonym for headURL. map, svg only.\n\n\n47\nheadlabel\nEdges\nlblString\n\"\"\nNaN\nText label to be placed near head of edge.\n\n\n48\nheadport\nEdges\nportPos\ncenter\nNaN\nIndicates where on the head node to attach the...\n\n\n49\nheadtarget\nEdges\nescString\n&lt;none&gt;\nNaN\nBrowser window to use for the headURL link. ma...\n\n\n50\nheadtooltip\nEdges\nescString\n\"\"\nNaN\nTooltip annotation attached to the head of an ...\n\n\n51\nheadURL\nEdges\nescString\n\"\"\nNaN\nIf defined, headURL is output as part of the h...\n\n\n63\nlabelangle\nEdges\ndouble\n-25.0\n-180.0\nThe angle (in degrees) in polar coordinates of...\n\n\n64\nlabeldistance\nEdges\ndouble\n1.0\n0.0\nScaling factor for the distance of headlabel /...\n\n\n65\nlabelfloat\nEdges\nbool\nfalse\nNaN\nIf true, allows edge labels to be less constra...\n\n\n66\nlabelfontcolor\nEdges\ncolor\nblack\nNaN\nColor used for headlabel and taillabel..\n\n\n67\nlabelfontname\nEdges\nstring\n\"Times-Roman\"\nNaN\nFont for headlabel and taillabel.\n\n\n68\nlabelfontsize\nEdges\ndouble\n14.0\n1.0\nFont size of headlabel and taillabel.\n\n\n69\nlabelhref\nEdges\nescString\n\"\"\nNaN\nSynonym for labelURL. map, svg only.\n\n\n72\nlabeltarget\nEdges\nescString\n&lt;none&gt;\nNaN\nBrowser window to open labelURL links in. map,...\n\n\n73\nlabeltooltip\nEdges\nescString\n\"\"\nNaN\nTooltip annotation attached to label of an edg...\n\n\n74\nlabelURL\nEdges\nescString\n\"\"\nNaN\nIf defined, labelURL is the link used for the ...\n\n\n76\nlayer\nClusters|Edges|Nodes\nlayerRange\n\"\"\nNaN\nSpecifies layers in which the node, edge or cl...\n\n\n82\nlen\nEdges\ndouble\n1.0 (neato) 0.3 (fdp)\nNaN\nPreferred edge length, in inches. neato, fdp o...\n\n\n85\nlhead\nEdges\nstring\n\"\"\nNaN\nLogical head of an edge. dot only.\n\n\n88\nlp\nClusters|Edges|Graphs\npoint\nNaN\nNaN\nLabel center position. write only.\n\n\n89\nltail\nEdges\nstring\n\"\"\nNaN\nLogical tail of an edge. dot only.\n\n\n95\nminlen\nEdges\nint\n1\n0\nMinimum edge length (rank difference between h...\n\n\n118\npenwidth\nClusters|Edges|Nodes\ndouble\n1.0\n0.0\nSpecifies the width of the pen, in points, use...\n\n\n121\npos\nEdges|Nodes\npoint, splineType\nNaN\nNaN\nPosition of node, or spline control points. ne...\n\n\n136\nsamehead\nEdges\nstring\n\"\"\nNaN\nEdges with the same head and the same samehead...\n\n\n137\nsametail\nEdges\nstring\n\"\"\nNaN\nEdges with the same tail and the same sametail...\n\n\n154\ntail_lp\nEdges\npoint\nNaN\nNaN\nPosition of an edge's tail label, in points.. ...\n\n\n155\ntailclip\nEdges\nbool\ntrue\nNaN\nIf true, the tail of an edge is clipped to the...\n\n\n156\ntailhref\nEdges\nescString\n\"\"\nNaN\nSynonym for tailURL.. map, svg only.\n\n\n157\ntaillabel\nEdges\nlblString\n\"\"\nNaN\nText label to be placed near tail of edge.\n\n\n158\ntailport\nEdges\nportPos\ncenter\nNaN\nIndicates where on the tail node to attach the...\n\n\n159\ntailtarget\nEdges\nescString\n&lt;none&gt;\nNaN\nBrowser window to use for the tailURL link. ma...\n\n\n160\ntailtooltip\nEdges\nescString\n\"\"\nNaN\nTooltip annotation attached to the tail of an ...\n\n\n161\ntailURL\nEdges\nescString\n\"\"\nNaN\nIf defined, tailURL is output as part of the t...\n\n\n170\nweight\nEdges\nint, double\n1\n0(dot,twopi) 1(neato,fdp)\nWeight of edge.\n\n\n173\nxlabel\nEdges|Nodes\nlblString\n\"\"\nNaN\nExternal label for a node or edge.\n\n\n174\nxlp\nEdges|Nodes\npoint\nNaN\nNaN\nPosition of an exterior label, in points. writ...\n\n\n\n\n\n\n\n\nclass EdgeAttributes(GraphVizAttributesBase):\n    arrowhead: Optional[str] = Field(\n        default=\"normal\",\n        description=\"Style of arrowhead on the head node of an edge.\",\n    )\n    arrowsize: Optional[Union[float,str]] = Field(\n        default=1.0,\n        ge=0.0,\n        description=\"Multiplicative scale factor for arrowheads.\",\n    )\n    arrowtail: Optional[str] = Field(\n        default=\"normal\",\n        description=\"Style of arrowhead on the tail node of an edge.\",\n    )\n    color: Optional[str] = Field(\n        default=\"black\",\n        description=\"Basic drawing color for graphics, not text.\",\n    )\n    constraint: Optional[str] = Field(\n        default='True',\n        description=\"If false, the edge is not used in ranking the nodes. (DOT only)\",\n    )\n    decorate: Optional[bool] = Field(\n        default=False,\n        description=\"Whether to connect the edge label to the edge with a line.\",\n    )\n    dir: Optional[str] = Field(\n        default=\"forward\",\n        description=\"Edge type for drawing arrowheads ('forward', 'none', etc.).\",\n    )\n    edgehref: Optional[str] = Field(\n        default=None,\n        description=\"Synonym for edgeURL. (map, SVG only)\",\n    )\n    edgetarget: Optional[str] = Field(\n        default=None,\n        description=\"Browser window to use for the edgeURL link. (map, SVG only)\",\n    )\n    edgetooltip: Optional[str] = Field(\n        default=None,\n        description=\"Tooltip annotation attached to the non-label part of an edge. (cmap, SVG only)\",\n    )\n    edgeURL: Optional[str] = Field(\n        default=None,\n        description=\"The link for the non-label parts of an edge. (map, SVG only)\",\n    )\n    fillcolor: Optional[str] = Field(\n        default=None,\n        description=\"Color used to fill the background of a node or cluster.\",\n    )\n    head_lp: Optional[str] = Field(\n        default=None,\n        description=\"Center position of an edge’s head label. (Write only)\",\n    )\n    headclip: Optional[bool] = Field(\n        default=True,\n        description=\"If true, the head of an edge is clipped to the boundary of the head node.\",\n    )\n    headhref: Optional[str] = Field(\n        default=None,\n        description=\"Synonym for headURL. (map, SVG only)\",\n    )\n    headlabel: Optional[str] = Field(\n        default=None,\n        description=\"Text label to be placed near head of edge.\",\n    )\n    headport: Optional[str] = Field(\n        default=\"center\",\n        description=\"Indicates where on the head node to attach the head of the edge.\",\n    )\n    headtarget: Optional[str] = Field(\n        default=None,\n        description=\"Browser window to use for the headURL link. (map, SVG only)\",\n    )\n    headtooltip: Optional[str] = Field(\n        default=None,\n        description=\"Tooltip annotation attached to the head of an edge. (cmap, SVG only)\",\n    )\n    headURL: Optional[str] = Field(\n        default=None,\n        description=\"If defined, headURL is output as part of the head label of the edge. (map, SVG only)\",\n    )\n    labelangle: Optional[Union[float,str]] = Field(\n        default=-25.0,\n        ge=-180.0,\n        description=\"The angle (in degrees) in polar coordinates of the head & tail edge labels.\",\n    )\n    labeldistance: Optional[Union[float,str]] = Field(\n        default=1.0,\n        ge=0.0,\n        description=\"Scaling factor for the distance of headlabel/taillabel from the head/tail nodes.\",\n    )\n    labelfloat: Optional[bool] = Field(\n        default=False,\n        description=\"If true, allows edge labels to be less constrained in position.\",\n    )\n    labelfontcolor: Optional[str] = Field(\n        default=\"black\",\n        description=\"Color used for headlabel and taillabel.\",\n    )\n    labelfontname: Optional[str] = Field(\n        default=\"Times-Roman\",\n        description=\"Font for headlabel and taillabel.\",\n    )\n    labelfontsize: Optional[Union[float,str]] = Field(\n        default=14.0,\n        ge=1.0,\n        description=\"Font size of headlabel and taillabel.\",\n    )\n    labelhref: Optional[str] = Field(\n        default=None,\n        description=\"Synonym for labelURL. (map, SVG only)\",\n    )\n    labeltarget: Optional[str] = Field(\n        default=None,\n        description=\"Browser window to open labelURL links in. (map, SVG only)\",\n    )\n    labeltooltip: Optional[str] = Field(\n        default=None,\n        description=\"Tooltip annotation attached to label of an edge. (cmap, SVG only)\",\n    )\n    labelURL: Optional[str] = Field(\n        default=None,\n        description=\"If defined, labelURL is the link used for the label of an edge. (map, SVG only).\",\n    )\n    layer: Optional[str] = Field(\n        default=None,\n        description=\"Specifies layers in which the edge is present.\",\n    )\n    len: Optional[Union[float,str]] = Field(\n        default=1.0,\n        description=\"Preferred edge length, in inches. (neato, fdp only).\",\n    )\n    lhead: Optional[str] = Field(\n        default=None,\n        description=\"Logical head of an edge. (DOT only).\",\n    )\n    lp: Optional[str] = Field(\n        default=None,\n        description=\"Label center position. (Write only).\",\n    )\n    ltail: Optional[str] = Field(\n        default=None,\n        description=\"Logical tail of an edge. (DOT only).\",\n    )\n    minlen: Optional[int] = Field(\n        default=1,\n        ge=0,\n        description=\"Minimum edge length (rank difference between head and tail). (DOT only).\",\n    )\n    penwidth: Optional[Union[float,str]] = Field(\n        default=1.0,\n        ge=0.0,\n        description=\"Specifies the width of the pen, in points, used to draw lines and curves.\",\n    )\n    pos: Optional[str] = Field(\n        default=None,\n        description=\"Position of the edge’s spline control points. (neato, fdp only).\",\n    )\n    samehead: Optional[str] = Field(\n        default=None,\n        description=\"Edges with the same head and the same samehead value are aimed at the same point on the head. (DOT only).\",\n    )\n    sametail: Optional[str] = Field(\n        default=None,\n        description=\"Edges with the same tail and the same sametail value are aimed at the same point on the tail. (DOT only).\",\n    )\n    tail_lp: Optional[str] = Field(\n        default=None,\n        description=\"Position of an edge’s tail label, in points. (Write only).\",\n    )\n    tailclip: Optional[bool] = Field(\n        default=True,\n        description=\"If true, the tail of an edge is clipped to the boundary of the tail node.\",\n    )\n    tailhref: Optional[str] = Field(\n        default=None,\n        description=\"Synonym for tailURL. (map, SVG only).\",\n    )\n    taillabel: Optional[str] = Field(\n        default=None,\n        description=\"Text label to be placed near tail of edge.\",\n    )\n    tailport: Optional[str] = Field(\n        default=\"center\",\n        description=\"Indicates where on the tail node to attach the tail of the edge.\",\n    )\n    tailtarget: Optional[str] = Field(\n        default=None,\n        description=\"Browser window to use for the tailURL link. (map, SVG only).\",\n    )\n    tailtooltip: Optional[str] = Field(\n        default=None,\n        description=\"Tooltip annotation attached to the tail of an edge. (cmap, SVG only).\",\n    )\n    tailURL: Optional[str] = Field(\n        default=None,\n        description=\"If defined, tailURL is output as part of the tail label of the edge. (map, SVG only).\",\n    )\n    weight: Optional[Union[int, float]] = Field(\n        default=1,\n        ge=0,\n        description=\"Weight of the edge.\",\n    )\n    xlabel: Optional[str] = Field(\n        default=None,\n        description=\"External label for an edge.\",\n    )\n    xlp: Optional[str] = Field(\n        default=None,\n        description=\"Position of an exterior label, in points. (Write only).\",\n    )\n\n\n\nNode Attributes\n\nattributes[\n    (attributes['Used By'].str.contains('Nodes'))&(attributes['Used By'].index.isin(shared_ix)==False)\n]\n\n\n\n\n\n\n\n\nName\nUsed By\nType\nDefault\nMinimum\nDescription, notes\n\n\n\n\n1\narea\nClusters|Nodes\ndouble\n1.0\n&gt;0\nIndicates the preferred area for a node or emp...\n\n\n13\ncolor\nClusters|Edges|Nodes\ncolor, colorList\nblack\nNaN\nBasic drawing color for graphics, not text.\n\n\n26\ndistortion\nNodes\ndouble\n0.0\n-100.0\nDistortion factor for shape=polygon.\n\n\n34\nfillcolor\nClusters|Edges|Nodes\ncolor, colorList\nlightgrey (nodes) black (clusters)\nNaN\nColor used to fill the background of a node or...\n\n\n35\nfixedsize\nNodes\nbool, string\nfalse\nNaN\nWhether to use the specified width and height ...\n\n\n42\ngradientangle\nClusters|Graphs|Nodes\nint\n0\n0\nIf a gradient fill is being used, this determi...\n\n\n43\ngroup\nNodes\nstring\n\"\"\nNaN\nName for a group of nodes, for bundling edges ...\n\n\n52\nheight\nNodes\ndouble\n0.5\n0.02\nHeight of node, in inches.\n\n\n55\nimage\nNodes\nstring\n\"\"\nNaN\nGives the name of a file containing an image t...\n\n\n57\nimagepos\nNodes\nstring\n\"mc\"\nNaN\nControls how an image is positioned within its...\n\n\n58\nimagescale\nNodes\nbool, string\nfalse\nNaN\nControls how an image fills its containing node.\n\n\n71\nlabelloc\nClusters|Graphs|Nodes\nstring\n\"t\" (clusters) \"b\" (root graphs) \"c\" (nodes)\nNaN\nVertical placement of labels for nodes, root g...\n\n\n76\nlayer\nClusters|Edges|Nodes\nlayerRange\n\"\"\nNaN\nSpecifies layers in which the node, edge or cl...\n\n\n91\nmargin\nClusters|Graphs|Nodes\ndouble, point\n&lt;device-dependent&gt;\nNaN\nFor graphs, this sets x and y margins of canva...\n\n\n106\nordering\nGraphs|Nodes\nstring\n\"\"\nNaN\nConstrains the left-to-right ordering of node ...\n\n\n107\norientation\nGraphs|Nodes\ndouble, string\n0.0 \"\"\n-360.0\nnode shape rotation angle, or graph orientation.\n\n\n118\npenwidth\nClusters|Edges|Nodes\ndouble\n1.0\n0.0\nSpecifies the width of the pen, in points, use...\n\n\n119\nperipheries\nClusters|Nodes\nint\n&lt;shape default&gt; (nodes) 1 (clusters)\n0\nSet number of peripheries used in polygonal sh...\n\n\n120\npin\nNodes\nbool\nfalse\nNaN\nKeeps the node at the node's given input posit...\n\n\n121\npos\nEdges|Nodes\npoint, splineType\nNaN\nNaN\nPosition of node, or spline control points. ne...\n\n\n128\nrects\nNodes\nrect\nNaN\nNaN\nRectangles for fields of records, in points. w...\n\n\n129\nregular\nNodes\nbool\nfalse\nNaN\nIf true, force polygon to be regular..\n\n\n133\nroot\nGraphs|Nodes\nstring, bool\n&lt;none&gt; (graphs) false (nodes)\nNaN\nSpecifies nodes to be used as the center of th...\n\n\n138\nsamplepoints\nNodes\nint\n8 (output) 20 (overlap and image maps)\nNaN\nGives the number of points used for a circle/e...\n\n\n142\nshape\nNodes\nshape\nellipse\nNaN\nSets the shape of a node.\n\n\n143\nshapefile\nNodes\nstring\n\"\"\nNaN\nA file containing user-supplied node content.\n\n\n145\nsides\nNodes\nint\n4\n0\nNumber of sides when shape=polygon.\n\n\n147\nskew\nNodes\ndouble\n0.0\n-100.0\nSkew factor for shape=polygon.\n\n\n149\nsortv\nClusters|Graphs|Nodes\nint\n0\n0\nSort order of graph components for ordering pa...\n\n\n167\nvertices\nNodes\npointList\nNaN\nNaN\nSets the coordinates of the vertices of the no...\n\n\n171\nwidth\nNodes\ndouble\n0.75\n0.01\nWidth of node, in inches.\n\n\n173\nxlabel\nEdges|Nodes\nlblString\n\"\"\nNaN\nExternal label for a node or edge.\n\n\n174\nxlp\nEdges|Nodes\npoint\nNaN\nNaN\nPosition of an exterior label, in points. writ...\n\n\n175\nz\nNodes\ndouble\n0.0\nNaN\nZ-coordinate value for 3D layouts and displays.\n\n\n\n\n\n\n\n\nclass NodeAttributes(GraphVizAttributesBase):\n    area: Optional[Union[float,str]] = Field(\n        default=1.0,\n        gt=0,\n        description=\"Indicates the preferred area for a node or empty cluster. (Patchwork only)\",\n    )\n    color: Optional[str] = Field(\n        default=\"black\",\n        description=\"Basic drawing color for graphics, not text.\",\n    )\n    distortion: Optional[Union[float,str]] = Field(\n        default=0.0,\n        ge=-100.0,\n        description=\"Distortion factor for shape=polygon.\",\n    )\n    fillcolor: Optional[str] = Field(\n        default=\"lightgrey\",\n        description=\"Color used to fill the background of a node or cluster.\",\n    )\n    fixedsize: Optional[Union[bool, str]] = Field(\n        default=False,\n        description=\"Whether to use the specified width and height attributes to choose node size \"\n                    \"(rather than sizing to fit the node contents).\",\n    )\n    gradientangle: Optional[int] = Field(\n        default=0,\n        ge=0,\n        description=\"If a gradient fill is being used, this determines the angle of the fill.\",\n    )\n    group: Optional[str] = Field(\n        default=None,\n        description=\"Name for a group of nodes, for bundling edges avoiding crossings. (DOT only)\",\n    )\n    height: Optional[Union[float,str]] = Field(\n        default=0.5,\n        ge=0.02,\n        description=\"Height of node, in inches.\",\n    )\n    image: Optional[str] = Field(\n        default=None,\n        description=\"Gives the name of a file containing an image to be displayed inside a node.\",\n    )\n    imagepos: Optional[str] = Field(\n        default=\"mc\",\n        description=\"Controls how an image is positioned within its containing node.\",\n    )\n    imagescale: Optional[Union[bool, str]] = Field(\n        default=False,\n        description=\"Controls how an image fills its containing node.\",\n    )\n    labelloc: Optional[str] = Field(\n        default=\"c\",\n        description=\"Vertical placement of labels for nodes, root graphs, and clusters.\",\n    )\n    layer: Optional[str] = Field(\n        default=None,\n        description=\"Specifies layers in which the node is present.\",\n    )\n    margin: Optional[Union[float, str]] = Field(\n        default=None,\n        description=\"For graphs, this sets x and y margins of canvas, in inches.\",\n    )\n    ordering: Optional[str] = Field(\n        default=None,\n        description=\"Constrains the left-to-right ordering of node edges. (DOT only)\",\n    )\n    orientation: Optional[Union[float, str]] = Field(\n        default=0.0,\n        description=\"Node shape rotation angle, or graph orientation.\",\n    )\n    penwidth: Optional[Union[float,str]] = Field(\n        default=1.0,\n        ge=0.0,\n        description=\"Specifies the width of the pen, in points, used to draw lines and curves.\",\n    )\n    peripheries: Optional[int] = Field(\n        default=None,\n        ge=0,\n        description=\"Set number of peripheries used in polygonal shapes and cluster boundaries.\",\n    )\n    pin: Optional[bool] = Field(\n        default=False,\n        description=\"Keeps the node at the node's given input position. (neato, fdp only)\",\n    )\n    pos: Optional[str] = Field(\n        default=None,\n        description=\"Position of the node, or spline control points. (neato, fdp only)\",\n    )\n    rects: Optional[str] = Field(\n        default=None,\n        description=\"Rectangles for fields of records, in points. (Write only)\",\n    )\n    regular: Optional[bool] = Field(\n        default=False,\n        description=\"If true, force polygon to be regular.\",\n    )\n    root: Optional[Union[str, bool]] = Field(\n        default=False,\n        description=\"Specifies nodes to be used as the center of the layout. (twopi, circo only)\",\n    )\n    samplepoints: Optional[int] = Field(\n        default=None,\n        description=\"Gives the number of points used for a circle/ellipse node.\",\n    )\n    shape: Optional[str] = Field(\n        default=\"ellipse\",\n        description=\"Sets the shape of a node.\",\n    )\n    shapefile: Optional[str] = Field(\n        default=None,\n        description=\"A file containing user-supplied node content.\",\n    )\n    sides: Optional[int] = Field(\n        default=4,\n        ge=0,\n        description=\"Number of sides when shape=polygon.\",\n    )\n    skew: Optional[Union[float,str]] = Field(\n        default=0.0,\n        ge=-100.0,\n        description=\"Skew factor for shape=polygon.\",\n    )\n    sortv: Optional[int] = Field(\n        default=0,\n        ge=0,\n        description=\"Sort order of graph components for ordering packmode packing.\",\n    )\n    vertices: Optional[str] = Field(\n        default=None,\n        description=\"Sets the coordinates of the vertices of the node's polygon, in inches. (Write only)\",\n    )\n    width: Optional[Union[float,str]] = Field(\n        default=0.75,\n        ge=0.01,\n        description=\"Width of node, in inches.\",\n    )\n    xlabel: Optional[str] = Field(\n        default=None,\n        description=\"External label for a node.\",\n    )\n    xlp: Optional[str] = Field(\n        default=None,\n        description=\"Position of an exterior label, in points. (Write only)\",\n    )\n    z: Optional[Union[float,str]] = Field(\n        default=0.0,\n        ge=-1000.0,\n        description=\"Z-coordinate value for 3D layouts and displays.\",\n    )\n\n\n\nGraph Attributes\n\nattributes[\n    (attributes['Used By'].str.contains('Graphs'))&(attributes['Used By'].index.isin(shared_ix)==False)\n]\n\n\n\n\n\n\n\n\nName\nUsed By\nType\nDefault\nMinimum\nDescription, notes\n\n\n\n\n0\n_background\nGraphs\nxdot\n&lt;none&gt;\nNaN\nA string in the xdot format specifying an arbi...\n\n\n5\nbb\nClusters|Graphs\nrect\nNaN\nNaN\nBounding box of drawing in points. write only.\n\n\n6\nbeautify\nGraphs\nbool\nfalse\nNaN\nWhether to draw leaf nodes uniformly in a circ...\n\n\n7\nbgcolor\nClusters|Graphs\ncolor, colorList\n&lt;none&gt;\nNaN\nCanvas background color.\n\n\n8\ncenter\nGraphs\nbool\nfalse\nNaN\nWhether to center the drawing in the output ca...\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n163\nTBbalance\nGraphs\nstring\n''\nNaN\nWhich rank to move floating (loose) nodes to. ...\n\n\n165\ntruecolor\nGraphs\nbool\nNaN\nNaN\nWhether internal bitmap rendering relies on a ...\n\n\n168\nviewport\nGraphs\nviewPort\n\"\"\nNaN\nClipping window on final drawing.\n\n\n169\nvoro_margin\nGraphs\ndouble\n0.05\n0.0\nTuning margin of Voronoi technique. neato, fdp...\n\n\n172\nxdotversion\nGraphs\nstring\nNaN\nNaN\nDetermines the version of xdot used in output....\n\n\n\n\n88 rows × 6 columns\n\n\n\n\nclass GraphAttributes(GraphVizAttributesBase):\n    background: Optional[str] = Field(\n        default=None,\n        alias='_background',\n        description=\"A string in the xdot format specifying an arbitrary background.\",\n    )\n    bb: Optional[str] = Field(\n        default=None,\n        description=\"Bounding box of drawing in points. (Write only)\",\n    )\n    beautify: Optional[bool] = Field(\n        default=False,\n        description=\"Whether to draw leaf nodes uniformly in a circle around the root node in sfdp. (sfdp only)\",\n    )\n    bgcolor: Optional[str] = Field(\n        default=None,\n        description=\"Canvas background color.\",\n    )\n    center: Optional[bool] = Field(\n        default=False,\n        description=\"Whether to center the drawing in the output canvas.\",\n    )\n    charset: Optional[str] = Field(\n        default=\"UTF-8\",\n        description=\"Character encoding used when interpreting string input as a text label.\",\n    )\n    clusterrank: Optional[str] = Field(\n        default=\"local\",\n        description=\"Mode used for handling clusters. (DOT only)\",\n    )\n    compound: Optional[bool] = Field(\n        default=False,\n        description=\"If true, allow edges between clusters. (DOT only)\",\n    )\n    concentrate: Optional[str] = Field(\n        default='False',\n        description=\"If true, use edge concentrators.\",\n    )\n    Damping: Optional[Union[float,str]] = Field(\n        default=0.99,\n        ge=0.0,\n        description=\"Factor damping force motions. (neato only)\",\n    )\n    defaultdist: Optional[Union[float,str]] = Field(\n        default=None,\n        description=\"The distance between nodes in separate connected components. (neato only)\",\n    )\n    dim: Optional[int] = Field(\n        default=2,\n        ge=2,\n        description=\"Set the number of dimensions used for the layout. (neato, fdp, sfdp only)\",\n    )\n    dimen: Optional[int] = Field(\n        default=2,\n        ge=2,\n        description=\"Set the number of dimensions used for rendering. (neato, fdp, sfdp only)\",\n    )\n    diredgeconstraints: Optional[Union[str, bool]] = Field(\n        default=False,\n        description=\"Whether to constrain most edges to point downwards. (neato only)\",\n    )\n    dpi: Optional[Union[float,str]] = Field(\n        default=96.0,\n        ge=0.0,\n        description=\"Specifies the expected number of pixels per inch on a display device. (bitmap output, SVG only)\",\n    )\n    epsilon: Optional[Union[float,str]] = Field(\n        default=None,\n        description=\"Terminating condition. (neato only)\",\n    )\n    esep: Optional[str] = Field(\n        default=\"+3\",\n        description=\"Margin used around polygons for spline edge routing. (neato, fdp, sfdp, osage, circo, twopi only)\",\n    )\n    fontnames: Optional[str] = Field(\n        default=None,\n        description=\"Allows user control of how basic fontnames are represented in SVG output. (SVG only)\",\n    )\n    fontpath: Optional[str] = Field(\n        default=None,\n        description=\"Directory list used by libgd to search for bitmap fonts.\",\n    )\n    forcelabels: Optional[bool] = Field(\n        default=True,\n        description=\"Whether to force placement of all xlabels, even if overlapping.\",\n    )\n    gradientangle: Optional[int] = Field(\n        default=0,\n        ge=0,\n        description=\"If a gradient fill is being used, this determines the angle of the fill.\",\n    )\n    imagepath: Optional[str] = Field(\n        default=None,\n        description=\"A list of directories in which to look for image files.\",\n    )\n    inputscale: Optional[Union[float,str]] = Field(\n        default=None,\n        description=\"Scales the input positions to convert between length units. (neato, fdp only)\",\n    )\n    K: Optional[Union[float,str]] = Field(\n        default=0.3,\n        ge=0.0,\n        description=\"Spring constant used in virtual physical model. (fdp, sfdp only)\",\n    )\n    label_scheme: Optional[int] = Field(\n        default=0,\n        ge=0,\n        description=\"Whether to treat a node whose name has the form |edgelabel|* as a special node representing an edge label. (sfdp only)\",\n    )\n    labeljust: Optional[str] = Field(\n        default=\"c\",\n        description=\"Justification for graph & cluster labels.\",\n    )\n    labelloc: Optional[str] = Field(\n        default=\"b\",\n        description=\"Vertical placement of labels for graphs, clusters, and nodes.\",\n    )\n    landscape: Optional[bool] = Field(\n        default=False,\n        description=\"If true, the graph is rendered in landscape mode.\",\n    )\n    layerlistsep: Optional[str] = Field(\n        default=\",\",\n        description=\"Separator characters used to split layerRange attributes into a list of ranges.\",\n    )\n    layers: Optional[str] = Field(\n        default=None,\n        description=\"A linearly ordered list of layer names attached to the graph.\",\n    )\n    layout: Optional[str] = Field(\n        default=None,\n        description=\"Which layout engine to use.\",\n    )\n    levels: Optional[int] = Field(\n        default=None,\n        description=\"Number of levels allowed in the multilevel scheme. (sfdp only)\",\n    )\n    levelsgap: Optional[Union[float,str]] = Field(\n        default=0.0,\n        description=\"Strictness of neato level constraints. (neato only)\",\n    )\n    lp: Optional[str] = Field(\n        default=None,\n        description=\"Label center position. (Write only)\",\n    )\n    margin: Optional[Union[float, str]] = Field(\n        default=None,\n        description=\"Sets x and y margins of canvas, in inches.\",\n    )\n    maxiter: Optional[int] = Field(\n        default=None,\n        description=\"Sets the number of iterations used. (neato, fdp only)\",\n    )\n    nodesep: Optional[Union[float,str]] = Field(\n        default=0.25,\n        ge=0.02,\n        description=\"Minimum space between two adjacent nodes in the same rank, in inches. (DOT only)\",\n    )\n    pack: Optional[Union[bool, int]] = Field(\n        default=False,\n        description=\"Whether each connected component of the graph should be laid out separately, and then packed together.\",\n    )\n    rankdir: Optional[str] = Field(\n        default=\"TB\",\n        description=\"Sets direction of graph layout. (DOT only)\",\n    )\n    ranksep: Optional[Union[float, str]] = Field(\n        default=0.5,\n        description=\"Specifies separation between ranks. (DOT, twopi only)\",\n    )\n    resolution: Optional[Union[float,str]] = Field(\n        default=96.0,\n        ge=0.0,\n        description=\"Synonym for dpi. (bitmap output, SVG only)\",\n    )\n    root: Optional[Union[str, bool]] = Field(\n        default=None,\n        description=\"Specifies nodes to be used as the center of the layout. (twopi, circo only)\",\n    )\n    rotate: Optional[int] = Field(\n        default=0,\n        description=\"If rotate=90, sets drawing orientation to landscape.\",\n    )\n    scale: Optional[Union[float, str]] = Field(\n        default=None,\n        description=\"Scales layout by the given factor after the initial layout. (neato, twopi only)\",\n    )\n    size: Optional[Union[float, str]] = Field(\n        default=None,\n        description=\"Maximum width and height of drawing, in inches.\",\n    )\n    smoothing: Optional[str] = Field(\n        default=\"none\",\n        description=\"Specifies a post-processing step used to smooth out an uneven distribution of nodes. (sfdp only)\",\n    )\n    splines: Optional[Union[bool, str]] = Field(\n        default=None,\n        description=\"Controls how, and if, edges are represented.\",\n    )\n    start: Optional[str] = Field(\n        default=None,\n        description=\"Parameter used to determine the initial layout of nodes. (neato, fdp, sfdp only)\",\n    )\n    xdotversion: Optional[str] = Field(\n        default=None,\n        description=\"Determines the version of xdot used in output. (xdot only)\",\n    )\n\n\n\nEdge & Node\n\nclass Edge(EdgeAttributes):\n    pass\n\n\nfrom pydantic.type_adapter import TypeAdapter\n\n\nclass Node(NodeAttributes):\n    #model_config = ConfigDict(repr_kwargs={'include':{'children'}})\n    \n    children: Optional[List[\n        Tuple[EdgeAttributes,'Node']\n    ]] = []\n\n    \n    def __gt__(self,other):\n        # if we just get a node, give it a default edge \n        if type(other)==Node:\n            child = (Edge('default'),other)\n        if type(other)==tuple:\n            # if edge is provided as a string, turn it into an edge\n            if type(other[0])==str:\n                child = (Edge(other[0],other[1]))\n            else:\n                child=other\n        \n        self.children.append(child)\n        \n        self.model_validate(self)\n        \n\n    def __call__(self,name:str,**updates):\n        \"\"\"call an instantiated node to return a copy with provided updates\"\"\"\n        updates['name']=name\n        return self.model_copy(update=updates,deep=True)\n\n\nunpack node\n\ndef unpack_node(graph,node,model=None):\n    \"\"\"recursively unpack node in tree\"\"\"\n    #logging.debug(node.name)\n    ea = {}\n    na = {}\n    if model:\n        ea = {attr.name:attr.model_dump(exclude_unset=True) for attr in model.edge_attributes}\n        na = {attr.name:attr.model_dump(exclude_unset=True,exclude={'children'}) for attr in model.node_attributes}\n    attrs = node.model_dump(exclude_unset=True,exclude={'children'}) | na.get(node.name,{})\n    \n    graph.node(\n        **attrs\n    )\n    if len(node.children)==0:\n        return node\n    \n\n    for edge,child_node in node.children:\n        edge_attrs = edge.model_dump(exclude_unset=True) | ea.get(edge.name,{})    \n        \n        graph.edge(\n            tail_name = node.name,\n            head_name = child_node.name,\n            **edge_attrs    \n        )\n        unpack_node(graph,child_node,model)\n\n# chatgpt solution for preventing dupes\ndef unpack_node(graph, node, model=None, expanded=None, seen_edges=None):\n    \"\"\"Recursively unpack node into the graph, without duplicating subtrees.\"\"\"\n    if expanded is None:\n        expanded = set()\n    if seen_edges is None:\n        seen_edges = set()\n\n    # collect default attrs\n    ea = {}\n    na = {}\n    if model:\n        ea = {attr.name: attr.model_dump(exclude_unset=True) for attr in model.edge_attributes}\n        na = {attr.name: attr.model_dump(exclude_unset=True, exclude={'children'}) for attr in model.node_attributes}\n    attrs = node.model_dump(exclude_unset=True, exclude={'children'}) | na.get(node.name, {})\n\n    # add/update the node itself\n    graph.node(**attrs)\n\n    # nothing to traverse\n    if not node.children:\n        return node\n\n    # If we've already expanded this node once, don't add its children again\n    if node.name in expanded:\n        return node\n\n    expanded.add(node.name)\n\n    for edge, child_node in node.children:\n        edge_attrs = edge.model_dump(exclude_unset=True) | ea.get(edge.name, {})\n\n        # make a hashable signature of the edge (tail, head, attrs)\n        sig = (node.name, child_node.name, tuple(sorted(edge_attrs.items())))\n        if sig not in seen_edges:\n            graph.edge(tail_name=node.name, head_name=child_node.name, **edge_attrs)\n            seen_edges.add(sig)\n\n        unpack_node(graph, child_node, model, expanded, seen_edges)\n\n    return node\n\n\ngraph = Graph(name='test')\n\nnode = Node(\n    \"How do you feel?\",\n    children = [\n        (Edge('good'),Node('Wonderful')),\n        (Edge('bad'),Node('Sorry'))\n    ]\n)\n\nunpack_node(graph,node)\ngraph\n\n2025-09-02 15:33:30,582 - graphviz.backend.execute - DEBUG - run [PosixPath('dot'), '-Kdot', '-Tsvg']\n\n\n\n\n\n\n\n\n\n\n\n\nGraph Model\n\nclass GraphModel(GraphAttributes):\n    directional: bool = False\n    nodes: List[Node]\n    \n    node_attributes: Optional[List[NodeAttributes]] = []\n    edge_attributes : Optional[List[EdgeAttributes]] = []\n\n    def create_graph(self,):\n        graph_attrs = self.model_dump(\n                by_alias=True,\n                exclude_unset=True,\n                exclude={'nodes','node_attributes','edge_attributes','directional'}\n        )\n        if self.directional:\n            graph = Digraph(graph_attr=graph_attrs)\n        else:\n            graph = Graph(graph_attr=graph_attrs)\n        for node in self.nodes:\n            unpack_node(graph,node,self)\n        return graph\n\n\nnode = Node(\n    \"start\",\n    label='How do you feel?',\n    children = [\n        (Edge('good'),Node('Wonderful')),\n        (Edge('bad'),Node('Sorry'))\n    ]\n)\ngraph = GraphModel(\n    name=\"flowchart\",\n    nodes = [node],\n    edge_attributes=[\n        EdgeAttributes('good',color='green',label='Great!',pos='l'),\n        EdgeAttributes('bad',color='red',label=\"oh well...\")\n    ]\n)\ngraph\n\n\n\n\n\n\n\n\nname\nflowchart\n\n\nnodes\n\n\n\n\n\n\n\n\nname\nlabel\nchildren\n\n\n\n\nstart\nHow do you feel?\n\n\n\n\nname\n\n\n\n\ngood\n\n\nWonderful\n\n\n\n\n\n\nname\n\n\n\n\nbad\n\n\nSorry\n\n\n\n\n\n\n\n\n\nedge_attributes\n\n\n\n\nname\ngood\n\n\nlabel\nGreat!\n\n\ncolor\ngreen\n\n\npos\nl\n\n\n\n\n\n\nname\nbad\n\n\nlabel\noh well...\n\n\ncolor\nred\n\n\n\n\n\n\n\n\n\n\ngraph.create_graph()\n\n2025-09-02 15:33:30,640 - graphviz.backend.execute - DEBUG - run [PosixPath('dot'), '-Kdot', '-Tsvg']\n\n\n\n\n\n\n\n\n\n\nno = Edge(\"No\",label=\"No\")\nyes = Edge(\"Yes\",label=\"Yes\")\nnext_ = Edge('default')\neat = Node(\"Have a bite\")\ndrink = Node(\"Have a glass of water.\")\neaten = Node(name = \"eaten\",label=\"Have you eaten?\",fontcolor='blue')\ndrink &gt; (next_,eaten)\nsleep = Node(\"Take a nap\")\neat &gt; Node(\"Are you sleepy?\")\n\n\nfoul_mood_flow = Node(\n    \"Are you hydrated?\",\n    children=[\n        (no,drink),\n        (yes,Node(\n            name='eaten',\n            children=[\n                (no,eat),\n                (yes,Node(\"Are you sleepy?\"))\n            ]\n        ))\n    ]\n)\ngraph = GraphModel(\n    \"foul_mood_guide\",\n    directional=True,\n    nodes=[foul_mood_flow],\n    edge_attributes=[\n        Edge('default',constraint='False')\n    ]\n)\ngraph.create_graph()\n\n2025-09-02 15:33:30,691 - graphviz.backend.execute - DEBUG - run [PosixPath('dot'), '-Kdot', '-Tsvg']\n\n\n\n\n\n\n\n\n\n\nfund = Node('fund',label=\"Real Estate Owning GP, LLC\",shape=\"rectangle\",fillcolor='lightBlue',style='filled')\nlp = Node(name='lp-default',shape='triangle')\ngp_edge = Edge(name='gp',label = 'GP')\nedge = Edge('')\nlp1 = lp(\"LP 1\")\nlp2 = lp(\"LP 2\")\nlp3 = lp(\"LP 3\")\nlp4 = lp(\"LP 4\")\nfund &gt; (gp_edge,lp1)\nfund &gt; (gp_edge,lp2)\nlp2 &gt; (gp_edge,lp3)\nlp1 &gt; lp4\nagg = lp('Aggregator, LP')\nlp3 &gt; agg\nlp4 &gt; agg\nreit = Node('reit',label='Reit')\nagg &gt; reit\n\n\n(Edge('default'),reit) in agg.children\n\nTrue\n\n\n\ncorporate_structure = GraphModel(\n    \n    'corp',\n    nodes=[fund.model_dump(exclude_defaults=True)],\n    rankdir='TB',\n    directional=True,\n    #concentrate='True'\n\n)\n\ndisplay(corporate_structure)\ncorporate_structure.create_graph()\n\n\n\n\n\n\n\n\nname\ncorp\n\n\ndirectional\nTrue\n\n\nnodes\n\n\n\n\n\n\n\n\n\n\n\nname\nlabel\nstyle\nfillcolor\nshape\nchildren\n\n\n\n\nfund\nReal Estate Owning GP, LLC\nfilled\nlightBlue\nrectangle\n\n\n\n\n\nname\ngp\n\n\nlabel\nGP\n\n\n\n\n\n\n\n\n\n\nname\nLP 1\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\n\n\n\n\nname\nLP 4\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\n\n\n\n\nname\nAggregator, LP\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\nname\nreit\n\n\nlabel\nReit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ngp\n\n\nlabel\nGP\n\n\n\n\n\n\n\n\n\n\nname\nLP 2\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ngp\n\n\nlabel\nGP\n\n\n\n\n\n\n\n\n\n\nname\nLP 3\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\n\n\n\n\nname\nAggregator, LP\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\nname\nreit\n\n\nlabel\nReit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2025-09-02 15:33:36,116 - graphviz.backend.execute - DEBUG - run [PosixPath('dot'), '-Kdot', '-Tsvg']\n\n\n\n\n\n\n\n\n\n\ncorporate_structure.nodes[0]\n\n\n\n\n\n\n\n\nname\nfund\n\n\nlabel\nReal Estate Owning GP, LLC\n\n\nstyle\nfilled\n\n\nfillcolor\nlightBlue\n\n\nshape\nrectangle\n\n\nchildren\n\n\n\n\n\nname\ngp\n\n\nlabel\nGP\n\n\n\n\n\n\n\n\n\n\nname\nLP 1\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\n\n\n\n\nname\nLP 4\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\n\n\n\n\nname\nAggregator, LP\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\nname\nreit\n\n\nlabel\nReit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ngp\n\n\nlabel\nGP\n\n\n\n\n\n\n\n\n\n\nname\nLP 2\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ngp\n\n\nlabel\nGP\n\n\n\n\n\n\n\n\n\n\nname\nLP 3\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\n\n\n\n\nname\nAggregator, LP\n\n\nshape\ntriangle\n\n\nchildren\n\n\n\n\n\nname\ndefault\n\n\n\n\n\n\nname\nreit\n\n\nlabel\nReit",
    "crumbs": [
      "Resume",
      "projects",
      "Flow Chart Creator"
    ]
  },
  {
    "objectID": "database.html",
    "href": "database.html",
    "title": "Database",
    "section": "",
    "text": "I absolutely love SQLAlchemy. Data Modeling is one of the concepts that initially drew me to coding. But I hate creating the engine and and all the different options they give you for establishing a connection. And how easy it is to screw it up. Especially because 90% of the time I just want to preview a result in a DataFrame.\nI wanted a simple wrapper class that handled instantiation and the context managers required for connecting to the engine. While we’re at it we can make it look nice, too.\n\nsource\n\nDatabaseSettings\n\n DatabaseSettings (_case_sensitive:bool|None=None,\n                   _nested_model_default_partial_update:bool|None=None,\n                   _env_prefix:str|None=None,\n                   _env_file:DotenvType|None=Path('.'),\n                   _env_file_encoding:str|None=None,\n                   _env_ignore_empty:bool|None=None,\n                   _env_nested_delimiter:str|None=None,\n                   _env_nested_max_split:int|None=None,\n                   _env_parse_none_str:str|None=None,\n                   _env_parse_enums:bool|None=None,\n                   _cli_prog_name:str|None=None, _cli_parse_args:bool|list\n                   [str]|tuple[str,...]|None=None,\n                   _cli_settings_source:CliSettingsSource[Any]|None=None,\n                   _cli_parse_none_str:str|None=None,\n                   _cli_hide_none_type:bool|None=None,\n                   _cli_avoid_json:bool|None=None,\n                   _cli_enforce_required:bool|None=None,\n                   _cli_use_class_docs_for_groups:bool|None=None,\n                   _cli_exit_on_error:bool|None=None,\n                   _cli_prefix:str|None=None,\n                   _cli_flag_prefix_char:str|None=None,\n                   _cli_implicit_flags:bool|None=None,\n                   _cli_ignore_unknown_args:bool|None=None,\n                   _cli_kebab_case:bool|None=None,\n                   _cli_shortcuts:Mapping[str,str|list[str]]|None=None,\n                   _secrets_dir:PathType|None=None,\n                   username:Optional[str]=None,\n                   password:Optional[pydantic.types.SecretStr]=None,\n                   drivername:str, host:Optional[str]=None,\n                   port:Optional[int]=None, database:Optional[str]=None,\n                   query:dict[str,str]={})\n\n*Pydantic settings model for arguments passed to SQL Alchemy’s URL object.\nCustomized to accept variables from a central .yml file according to a key specified by the ‘env_prefix’ value of the model_config.**\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\nusername\n\nFalse\nNone\n\n\n\npassword\n\nFalse\nNone\n\n\n\ndrivername\nstring\nTrue\n\n\n\n\nhost\n\nFalse\nNone\n\n\n\nport\n\nFalse\nNone\n\n\n\ndatabase\n\nFalse\nNone\n\n\n\nquery\nobject\nFalse\n{}\n\n\n\n\n\nsource\n\n\nDatabase\n\n Database (username:Optional[str]=None,\n           password:Optional[pydantic.types.SecretStr]=None,\n           drivername:str, host:Optional[str]=None,\n           port:Optional[int]=None, database:Optional[str]=None,\n           query:dict[str,str]={})\n\n*Create a Database connection with default functionality.\nInherits attributes from DatabaseSettings to manage credentials.\nUse the class as-is to quickly create a database connection, or create a subclass to control connections to a specific database.\nMore on SQL Alchemy engines from SQLAlchemy docs:\n\nThe Engine is the starting point for any SQLAlchemy application. It’s “home base” for the actual database and its DBAPI.\n\nAn Engine references both a Dialect and a Pool, which together interpret the DBAPI’s module functions as well as the behavior of the database\nPool object which will establish a DBAPI connection at localhost:5432 when a connection request is first received\n– Note that the Engine and its underlying Pool do not establish the first actual DBAPI connection until the Engine.connect() method is called, or an operation which is dependent on this method such as Engine.execute() is invoked.\nIn this way, Engine and Pool can be said to have a lazy initialization behavior.\n\nThe Engine, once created, can either be used directly to interact with the database, or can be passed to a Session object to work with the ORM.**\n\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\nusername\n\nFalse\nNone\n\n\n\npassword\n\nFalse\nNone\n\n\n\ndrivername\nstring\nTrue\n\n\n\n\nhost\n\nFalse\nNone\n\n\n\nport\n\nFalse\nNone\n\n\n\ndatabase\n\nFalse\nNone\n\n\n\nquery\nobject\nFalse\n{}\n\n\n\n\n\n\nExample: RNAcentral Public Database\n\nRNAcentral offers a publicly available database of RNA sequences.\n\nI don’t know anything about RNA, but we’ll use it as an example of how to connect to database.\n\nimport os\n\n\nclass RNACentralDatabase(Database):\n    model_config = SettingsConfigDict(env_prefix='rna_db_')\n    \n    drivername='postgresql'\n    database='pfmegrnargs'\n    host='hh-pgsql-public.ebi.ac.uk'\n    port=5432\n    \n\nos.environ['rna_db_username']='reader'\nos.environ['rna_db_password']='NWDMCE5xdipIjRrp'\n\nrna_db = RNACentralDatabase()\nrna_db\n\n\n\n\nusername\nreader\n\n\npassword\n**********\n\n\ndrivername\npostgresql\n\n\nhost\nhh-pgsql-public.ebi.ac.uk\n\n\nport\n5432\n\n\ndatabase\npfmegrnargs\n\n\nquery\n\n\n\n\n\n\n\nrna_db.query_to_records(\"\"\"\n    SELECT schema_name\n    FROM information_schema.schemata;\n\"\"\")\n\n[{'schema_name': 'information_schema'},\n {'schema_name': 'pg_catalog'},\n {'schema_name': 'rnacen'}]",
    "crumbs": [
      "Resume",
      "Database"
    ]
  },
  {
    "objectID": "multi_enum.html",
    "href": "multi_enum.html",
    "title": "MultiEnum",
    "section": "",
    "text": "One of the most common, and most frustrating, issues I’ve encountered in real-world data work is the proliferation of different names that refer to the same thing. For example, I was once tasked with aggregating cash balances across different business lines, and various teams would use slightly different names to refer to the same bank (e.g. “JP Morgan Chase” vs “Chase Bank”). This issue kept cropping up in different projects, so I created this custom object as a generic solution to a common problem.\nThe MultiEnum class demonstrated here uses several advanced concepts such as metaclass programming, custom enum schemas, and integration with Pydantic for seamless validation and serialization. It allows multiple values (aliases) to map to a single canonical value, ensuring that data normalization is handled gracefully across diverse datasets. By leveraging Python’s Enum type system, this class ensures that business logic remains clean and efficient, while maintaining flexibility for real-world data complexities.",
    "crumbs": [
      "Resume",
      "MultiEnum"
    ]
  },
  {
    "objectID": "multi_enum.html#definitions",
    "href": "multi_enum.html#definitions",
    "title": "MultiEnum",
    "section": "Definitions",
    "text": "Definitions\n\nsource\n\nmerge_dicts_of_tuples\n\n merge_dicts_of_tuples (*dicts, allow_duplicate_keys=True)\n\nmerges an arbitrary number of dictionaries with tuple values by concatenating values with the same keys.\n\ndict1 = {'color': ('red',)}\ndict2 = {'color':('blue','yellow'), 'height':(10,) , 'weight':(5,)}\ndict3 = {'color': ('orange',), 'height':(20,30,40)}\n\nmerged = merge_dicts_of_tuples(dict1,dict2,dict3)\nassert merged['color']==('red', 'blue', 'yellow', 'orange')\n\n\nsource\n\n\nMultiEnumMeta\n\n MultiEnumMeta (cls, bases, classdict, **kwds)\n\n*Metaclass for MultiEnum, adding support for merging multiple MultiEnum objects and managing multiple aliases for a single canonical value.\nMethods: - __add__(cls, other): Combine two MultiEnum objects, merging their member mappings.\n- __iadd__(cls, other): In-place addition of MultiEnum objects, ensuring no duplicate aliases while preserving the canonical value.\n- __radd__(cls, other): Right-hand addition for merging multiple MultiEnum objects.\n- to_dict(cls): Convert the MultiEnum members into a dictionary, where each key is mapped to a tuple of canonical value and its aliases.*\n\nsource\n\n\nMultiEnum\n\n MultiEnum (value, names=None, module=None, qualname=None, type=None,\n            start=1)\n\nA Many-to-One mapping in which none of the possible options can be mapped to more than one value.",
    "crumbs": [
      "Resume",
      "MultiEnum"
    ]
  },
  {
    "objectID": "multi_enum.html#examples",
    "href": "multi_enum.html#examples",
    "title": "MultiEnum",
    "section": "Examples",
    "text": "Examples\n\n‘Flavor Profile’\nThe first value of each attribute is its “canonical value”. In other words, that is what will be displayed if any of the choices are given.\n\nclass FlavorProfile(MultiEnum):    \n    \n    black_fuit = (\n        'Black Fruit', # the first value is the 'canonical value'\n        'plum','jam','black cherry','blackberry','blackcurrant'\n    )\n    red_fruit = (\n        'Red Fruit',\n        'raspberry','red cherry','strawberries','cranberry'\n    )\n\nassert FlavorProfile('plum').value == 'Black Fruit'\nassert (\n    FlavorProfile('black cherry').value \n    == FlavorProfile('blackberry').value\n)\n\nIf you try to include the same choice for multiple attributes, you’ll get a ValueError\n\ntry:\n    class FlavorProfile(MultiEnum):\n        black_fruit = (\n            'Black Fruit', # the first value is the 'canonical value'\n            'plum','jam','cherry','blackberry','blackcurrant'\n        )\n        red_fruit = (\n            'Red Fruit',\n            'raspberry','cherry','strawberries','cranberry'\n        )\nexcept ValueError as e:\n    print(e) # you can't include 'cherry' in both choices\n\ncherry is trying to be mapped to Red Fruit, but it has already been mapped to instance FlavorProfile.black_fruit. You can't have the same value point to different objects.\n\n\n\nMultiEnum from Dict\n\nD = dict(    \n    black_fruit = (\n        'Black Fruit', # the first value is the 'canonical value'\n        'plum','jam','black cherry','blackberry','blackcurrant'\n    ),\n    red_fruit = (\n        'Red Fruit',\n        'raspberry','red cherry','strawberries','cranberry'\n    )\n)\n\n\nFlavorProfile = MultiEnum('FlavorProfile',D)\n\nassert FlavorProfile('plum').value == 'Black Fruit'\n\n\n\n\nAdding and Merging MultEnums\n\nclass Beatles(MultiEnum):\n    john = \"John Lennon\"\n    paul = \"Paul McCartney\"\n    george = \"George Harrison\"\n    ringo = \"Ringo Starr\"\n\nassert Beatles('john').value == \"John Lennon\"\n\nclass LedZepplin(MultiEnum):\n    robert = \"Robert Plant\"\n    jimmy = \"Jimmy Page\"\n    john = \"John Bonham\"\n    john_paul = \"John Paul Jones\"\n\nassert LedZepplin(\"john\").value==\"John Bonham\"\n\nThis won’t work because there are two Johns\n\ntry:\n    EnglishMusicians = MultiEnum('EnglishMusicians',Beatles + LedZepplin)\nexcept Exception as e:\n    print(e)\n\njohn is duplicated\n\n\n\nclass Beatles(MultiEnum):\n    john_lennon = \"John Lennon\",'john'\n    paul = \"Paul McCartney\"\n    george = \"George Harrison\"\n    ringo = \"Ringo Starr\"\n\nassert Beatles('john').value == \"John Lennon\"\n\nclass LedZepplin(MultiEnum):\n    robert = \"Robert Plant\"\n    jimmy = \"Jimmy Page\"\n    john_bonham = \"John Bonham\",'john'\n    john_paul = \"John Paul Jones\"\n\nassert LedZepplin(\"john\").value==\"John Bonham\"\n\nThis won’t work because ‘john’ is mapped to two members\n\ntry: \n    EnglishMusicians = MultiEnum('EnglishMusicians',Beatles + LedZepplin)\nexcept Exception as e:\n    print(e)\n\njohn is trying to be mapped to John Bonham, but it has already been mapped to instance EnglishMusicians.john_lennon. You can't have the same value point to different objects.\n\n\n\nclass Beatles(MultiEnum):\n    john_lennon = \"John Lennon\",'john lennon',\n    paul_mccartney = \"Paul McCartney\",'Macca'\n    george_harrison = \"George Harrison\"\n    ringo_starr = \"Ringo Starr\",\"Richard Starkey\"\n\nassert Beatles('john lennon').value == \"John Lennon\"\n\nclass LedZepplin(MultiEnum):\n    robert_plant = \"Robert Plant\",\"Percy\"\n    jimmy_page = \"Jimmy Page\",\"Led Wallet\"\n    john_bonham = \"John Bonham\",\"Bonzo\"\n    john_paul_jones = \"John Paul Jones\",\"Jonesy\"\n\nassert LedZepplin(\"Bonzo\").value==\"John Bonham\"\n\nclass BeatlesNickname(MultiEnum):\n    john_lennon = \"The Clever One\"\n    paul_mccartney = \"The Cute One\"\n    george_harrison = \"The Quiet One\"\n    ringo_starr = \"The Funny One\"\n\nThis won’t work because we’re trying to overwrite the Beatles with their nicknames\n\ntry:\n    Beatles+BeatlesNickname+LedZepplin\nexcept Exception as e:\n    \n    print(e)\n\njohn_lennon is duplicated\n\n\nBut this will because we can merge the beatles with their nicknames thanks to the __iadd__ method\n\nBeatles+=BeatlesNickname # &lt;-- merge two multi-enums that share keys\nEnglishMusicians = MultiEnum(\n    'EnglishMusicians',Beatles+LedZepplin # &lt;-- Add two multi-enums that have different keys\n)\n\nThe result is a combined MultiEnum that retains the original canonical value.\n\nassert EnglishMusicians('The Cute One').value=='Paul McCartney'\nassert EnglishMusicians('Bonzo').value==\"John Bonham\"\n\n\n\nAs part of a Pyantic model\n\nfrom pydantic import BaseModel\n\n\nclass EnglishMusicianBio(BaseModel):\n    name: EnglishMusicians\n    instrument: str\n    born: int\n\nIf you use MultiEnum in a Pydantic model, the schema will reflect the valid choices one can use to populate the model.\n\nfield_shcema = EnglishMusicianBio.schema()['properties']['name']\nfield_shcema['details'][0]\n\n{'aliases': ['Percy', 'robert_plant'],\n 'canonical_value': 'Robert Plant',\n 'name': 'robert_plant'}\n\n\n\npaul_bio = EnglishMusicianBio(name='The Cute One',instrument='bass',born=1942)\npaul_bio.json()\n\n'{\"name\":\"Paul McCartney\",\"instrument\":\"bass\",\"born\":1942}'\n\n\n\n\nA Fun Example\n\nUsing MultiEnumto solve a classic beginner coding problem.\n\n\nfizz = [x for x in range(0,100) if x%3==0]\nbuzz = [x for x in range(0,100) if x%5==0]\n\nfizzbuzz = set(fizz).intersection(buzz)\nfizz = (set(fizz)-set(buzz))-fizzbuzz\nbuzz = (set(buzz)-set(fizz))-fizzbuzz\n\nclass TestEnum(MultiEnum):\n    fizz = 'Fizz',*fizz\n    buzz = 'Buzz',*buzz\n    fizzbuzz = 'FizzBuzz',*fizzbuzz\n\nassert TestEnum(3).value=='Fizz'\nassert TestEnum(5).value=='Buzz'\nassert TestEnum(15).value=='FizzBuzz'",
    "crumbs": [
      "Resume",
      "MultiEnum"
    ]
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "models",
    "section": "",
    "text": "Set up\nI love working with Pydantic models, but I’d like to add a few tweaks to make them even better to work with in Jupyter Notebooks\nThe Goal\nUpdate how Pydantic models are displayed in Jupyter Lab and Jupyter Notebook to make them more natural to work with in an IPython environment\nThe Result\nSubclassed Pydantic’s BaseModel and add _repr_html_ and _repr_json_ methods",
    "crumbs": [
      "Resume",
      "models"
    ]
  },
  {
    "objectID": "models.html#displaying-objects-in-ipython",
    "href": "models.html#displaying-objects-in-ipython",
    "title": "models",
    "section": "Displaying Objects in IPython",
    "text": "Displaying Objects in IPython\nIf Jupyter encounters an error while calling their display methods, it will try the next available option for displaying an object. For example in Jupyter Lab the default representation is JSON, but if there is an error displaying the JSON it will fall back on displaying with HTML. If the error persists, it will fall back on default _\n__repr__ or __str__ methods.\nSo for this exercise, we’ll create a function that tries to dump a pydanitc model, but if anything goes wrong it will just issue a warning and pass. That way if there is an issue with our custom display, we’ll just get Pydantics default display mechanism. Note that we’re using delegates here, so the kwargs you’ll see in the docs are not included in the signature.\n\nsource\n\nmodel_dump_for_display\n\n model_dump_for_display (model:pydantic.main.BaseModel,\n                         mode:\"Literal['json','python']|str\"='python',\n                         include:IncEx|None=None, exclude:IncEx|None=None,\n                         context:Any|None=None, by_alias:bool|None=None,\n                         exclude_unset:bool=False,\n                         exclude_defaults:bool=False,\n                         exclude_none:bool=False, round_trip:bool=False, w\n                         arnings:\"bool|Literal['none','warn','error']\"=Tru\n                         e, fallback:Callable[[Any],Any]|None=None,\n                         serialize_as_any:bool=False)\n\n*Calls PydanticBaseModel.model_dump(), but if there is an issue it raises a warning and passes to allow default representation.\nDelegates kwargs to PydanticBaseModel.model_dump*\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmodel\nBaseModel\n\nThe model to by displayed\n\n\nmode\nLiteral[‘json’, ‘python’] | str\npython\n\n\n\ninclude\nIncEx | None\nNone\n\n\n\nexclude\nIncEx | None\nNone\n\n\n\ncontext\nAny | None\nNone\n\n\n\nby_alias\nbool | None\nNone\n\n\n\nexclude_unset\nbool\nFalse\n\n\n\nexclude_defaults\nbool\nFalse\n\n\n\nexclude_none\nbool\nFalse\n\n\n\nround_trip\nbool\nFalse\n\n\n\nwarnings\nbool | Literal[‘none’, ‘warn’, ‘error’]\nTrue\n\n\n\nfallback\nCallable[[Any], Any] | None\nNone\n\n\n\nserialize_as_any\nbool\nFalse\n\n\n\n\n\n\nExported source\n@delegates(PydanticBaseModel.model_dump) \ndef model_dump_for_display(\n    model:PydanticBaseModel, #The model to by displayed\n    **kwargs\n):\n    \"\"\"Calls PydanticBaseModel.model_dump(), \n    but if there is an issue it raises a warning and passes to allow default representation.  \n\n    Delegates kwargs to PydanticBaseModel.model_dump\n    \"\"\"\n    kwargs['mode']='json'\n    try:\n        return model.model_dump(**kwargs)\n    except Exception as e:\n        logging.warning(e)\n        pass\n\n\n\nsource\n\n\nDisplayMixin\n\n DisplayMixin ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nExported source\nclass DisplayMixin:\n    \n    def _repr_json_(self):\n        return model_dump_for_display(\n            self,\n            mode='json',\n            **self.model_config.get('repr_kwargs', {})\n        )\n\n    def _repr_html_(self):\n        return json2html.convert(\n            model_dump_for_display(self, mode='json', **self.model_config.get('repr_kwargs', {}))\n        )\n\n\n\n\n\n\n\n\nNote\n\n\n\nBecause we are subclassing Pydantic’s BaseModel, the docs shown here are taken from the parent class.\n\n\n\nsource\n\n\nBaseModel\n\n BaseModel ()\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.**\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\n\n\n\nExported source\nclass BaseModel(PydanticBaseModel,DisplayMixin):\n    pass\n\n\n\nfrom pydantic import Field,AliasGenerator\nfrom typing import *\nfrom datetime import date\n\n\n\nExample\nNote that you can customize how objects get displayed in the model_config. Here we’ll choose to display the object with aliases instead of field names.\n\nclass Project(BaseModel):\n    \"\"\"Model for capturing details about a construction project\"\"\"\n    \n    model_config = ConfigDict(\n        alias_generator=AliasGenerator(            \n            serialization_alias=lambda field_name: field_name.title().replace('_',' '),\n        ),\n        repr_kwargs={'by_alias':True} #&lt;-- I can control how the model gets displayed in jupyter by provided kwargs to model_dump \n    )\n    \n    project_name: str = Field(..., description=\"Name of the construction project\")\n    start_date: date = Field(..., description=\"Date when the project started\")\n    end_date: Optional[date] = Field(default=None, description=\"Date when the project ended\")\n    description: Optional[str] = Field(default=None, description=\"Short description of the project\")\n    is_active: bool = Field(..., description=\"Indicates if the project is currently active\")\n    budget: Optional[Dict[str, float]] = Field(default=None, description=\"Budget with different risk assessments\")\n    employees: List[Dict[str, str]] = Field(..., description=\"List of employees working on the project\")\n    technologies_used: List[str] = Field(..., description=\"List of technologies used in the project\")\n\nIn the docs, you’ll see this example represented as HTML. In Jupyter Lab it get’s displayed as interactive, collapsible JSON.\n\n# Creating an instance of the model\nexample_project = Project(\n    project_name=\"Highway Bridge Construction\",\n    start_date=date(2024, 1, 15),\n    end_date=None,\n    description=\"A large-scale project focused on building a new highway bridge.\",\n    is_active=True,\n    budget={\"conservative\": 5_000_000, \"base_line\": 6_500_000, \"worst_case\": 8_000_000},\n    employees=[\n        {\"name\": \"Alice Johnson\", \"roll\": \"Project Manager\"},\n        {\"name\": \"Bob Smith\", \"roll\": \"Engineer\"},\n        {\"name\": \"Clara Davis\", \"roll\": \"Site Supervisor\"}\n    ],\n    technologies_used=[\"AutoCAD\", \"Revit\", \"MS Project\"]\n)\n\nexample_project\n\n\n\n\n\n\n\n\nProject Name\nHighway Bridge Construction\n\n\nStart Date\n2024-01-15\n\n\nEnd Date\nNone\n\n\nDescription\nA large-scale project focused on building a new highway bridge.\n\n\nIs Active\nTrue\n\n\nBudget\n\n\n\nconservative\n5000000.0\n\n\nbase_line\n6500000.0\n\n\nworst_case\n8000000.0\n\n\n\n\n\nEmployees\n\n\n\nname\nroll\n\n\n\n\nAlice Johnson\nProject Manager\n\n\nBob Smith\nEngineer\n\n\nClara Davis\nSite Supervisor\n\n\n\n\n\nTechnologies Used\n\nAutoCAD\nRevit\nMS Project",
    "crumbs": [
      "Resume",
      "models"
    ]
  },
  {
    "objectID": "models.html#settings",
    "href": "models.html#settings",
    "title": "models",
    "section": "Settings",
    "text": "Settings\nI like to have all my settings in the same place instead of maintaining various .env files all over the place. So I’ve customized Pydantic’s BaseSettings to read values from a central yaml file.\n\nsource\n\nread_yaml_key\n\n read_yaml_key (file_path:str, target_key:str)\n\n*Reads values from a specific key in a YAML file and returns them as a dictionary.\n:param file_path: Path to the YAML file. :param target_key: The key whose values need to be extracted. :return: A dictionary containing the values for the specified key.*\n\nfile_path = \"example_data/example_config.yaml\"\ntarget_key = \"eg_db_\"\nresult = read_yaml_key(file_path, target_key)\nprint(result)\n\n{'user': 'harold', 'password': 'purple_crayon'}\n\n\n\nsource\n\n\nBaseSettings\n\n BaseSettings (_case_sensitive:bool|None=None,\n               _nested_model_default_partial_update:bool|None=None,\n               _env_prefix:str|None=None,\n               _env_file:DotenvType|None=Path('.'),\n               _env_file_encoding:str|None=None,\n               _env_ignore_empty:bool|None=None,\n               _env_nested_delimiter:str|None=None,\n               _env_nested_max_split:int|None=None,\n               _env_parse_none_str:str|None=None,\n               _env_parse_enums:bool|None=None,\n               _cli_prog_name:str|None=None,\n               _cli_parse_args:bool|list[str]|tuple[str,...]|None=None,\n               _cli_settings_source:CliSettingsSource[Any]|None=None,\n               _cli_parse_none_str:str|None=None,\n               _cli_hide_none_type:bool|None=None,\n               _cli_avoid_json:bool|None=None,\n               _cli_enforce_required:bool|None=None,\n               _cli_use_class_docs_for_groups:bool|None=None,\n               _cli_exit_on_error:bool|None=None,\n               _cli_prefix:str|None=None,\n               _cli_flag_prefix_char:str|None=None,\n               _cli_implicit_flags:bool|None=None,\n               _cli_ignore_unknown_args:bool|None=None,\n               _cli_kebab_case:bool|None=None,\n               _cli_shortcuts:Mapping[str,str|list[str]]|None=None,\n               _secrets_dir:PathType|None=None)\n\n*Base class for settings, allowing values to be overridden by environment variables.\nThis is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose), Heroku and any 12 factor app design.\nAll the below attributes can be set via model_config.\nArgs: _case_sensitive: Whether environment and CLI variable names should be read with case-sensitivity. Defaults to None. _nested_model_default_partial_update: Whether to allow partial updates on nested model default object fields. Defaults to False. _env_prefix: Prefix for all environment variables. Defaults to None. _env_file: The env file(s) to load settings values from. Defaults to Path(''), which means that the value from model_config['env_file'] should be used. You can also pass None to indicate that environment variables should not be loaded from an env file. _env_file_encoding: The env file encoding, e.g. 'latin-1'. Defaults to None. _env_ignore_empty: Ignore environment variables where the value is an empty string. Default to False. _env_nested_delimiter: The nested env values delimiter. Defaults to None. _env_nested_max_split: The nested env values maximum nesting. Defaults to None, which means no limit. _env_parse_none_str: The env string value that should be parsed (e.g. “null”, “void”, “None”, etc.) into None type(None). Defaults to None type(None), which means no parsing should occur. _env_parse_enums: Parse enum field names to values. Defaults to None., which means no parsing should occur. _cli_prog_name: The CLI program name to display in help text. Defaults to None if _cli_parse_args is None. Otherwise, defaults to sys.argv[0]. _cli_parse_args: The list of CLI arguments to parse. Defaults to None. If set to True, defaults to sys.argv[1:]. _cli_settings_source: Override the default CLI settings source with a user defined instance. Defaults to None. _cli_parse_none_str: The CLI string value that should be parsed (e.g. “null”, “void”, “None”, etc.) into None type(None). Defaults to _env_parse_none_str value if set. Otherwise, defaults to “null” if _cli_avoid_json is False, and “None” if _cli_avoid_json is True. _cli_hide_none_type: Hide None values in CLI help text. Defaults to False. _cli_avoid_json: Avoid complex JSON objects in CLI help text. Defaults to False. _cli_enforce_required: Enforce required fields at the CLI. Defaults to False. _cli_use_class_docs_for_groups: Use class docstrings in CLI group help text instead of field descriptions. Defaults to False. _cli_exit_on_error: Determines whether or not the internal parser exits with error info when an error occurs. Defaults to True. _cli_prefix: The root parser command line arguments prefix. Defaults to ““. _cli_flag_prefix_char: The flag prefix character to use for CLI optional arguments. Defaults to ‘-’. _cli_implicit_flags: Whether bool fields should be implicitly converted into CLI boolean flags. (e.g. –flag, –no-flag). Defaults to False. _cli_ignore_unknown_args: Whether to ignore unknown CLI args and parse only known ones. Defaults to False. _cli_kebab_case: CLI args use kebab case. Defaults to False. _cli_shortcuts: Mapping of target field name to alias names. Defaults to None. _secrets_dir: The secret files directory or a sequence of directories. Defaults to None.**\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\n\n\nclass ExampleSettings(BaseSettings):\n    model_config = dict(\n        yml_settings_path='example_data/example_config.yaml',\n        env_prefix='eg_db_'\n    )\n    user:str\n    password: str\n\n\nExampleSettings()\n\n\n\n\nuser\nharold\n\n\npassword\npurple_crayon\n\n\n\n\n\n\nimport os\n\n\nos.environ['eg_db_user'] = 'arnold'\nassert ExampleSettings().user == 'arnold'\nos.environ.pop('eg_db_user')\nassert ExampleSettings().user == 'harold'",
    "crumbs": [
      "Resume",
      "models"
    ]
  },
  {
    "objectID": "models.html#generic-data-model",
    "href": "models.html#generic-data-model",
    "title": "models",
    "section": "Generic Data Model",
    "text": "Generic Data Model\n\nclass DataModel(BaseModel,Generic[DataModelT],DisplayMixin):\n    \"\"\"\n    A Generic Data Model. The data attribute contains a list of objects of an arbitrary type. It is intended for use with a Pydantic model. \n    \n    Supports rich __repr__ displays in HTML and Javascript for use in Jupyter Notebook and Lab, respectively. \n    \"\"\"\n    data: List[DataModelT] = []\n\n    @delegates(BaseModel.model_dump)\n    def to_dataframe(self,**kwargs):\n        \"\"\"turns `data` into a DataFrame. Delegates to `pydantic.BaseModel.model_dump` to control model serialization\"\"\"\n        data = [x.model_dump(**kwargs) for x in self.data]\n        return pd.DataFrame(data).convert_dtypes()\n\n    @classmethod\n    def display_html_schema(cls):\n        return HTML(\n            json2html.convert(\n                cls.model_json_schema(\n                    mode='serialization'\n                )\n            )\n        )\n    \n    def _repr_html_(self):\n        try:\n            df_html = self.to_dataframe().head()._repr_html_()\n            schema = self.model_json_schema()\n            html_fields = [\n                f\"&lt;header&gt;&lt;b&gt;{schema_field}&lt;/b&gt;: {schema.get(schema_field)}\\n&lt;/header&gt;\"\n                for schema_field in ['title','description']\n            ]\n            for field in self.model_fields.keys():\n                if field!='data':\n                    html_fields.append(\n                        f'&lt;header&gt;&lt;b&gt;{field}&lt;/b&gt;: {getattr(self,field)}&lt;/header&gt;'\n                    )\n            return ''.join(\n                x for x in html_fields + ['&lt;header&gt;&lt;b&gt;DataFrame&lt;/b&gt;: &lt;/header&gt;',df_html]\n            )\n        except Exception as e:\n            logging.warning(e)\n            pass\n\n\nExample DataModel\n\nimport datetime as dt\nimport pandas as pd\nfrom pydantic import Field,ConfigDict,BeforeValidator\nfrom typing import Annotated,Optional\n\n\nurl = \"https://data.cityofnewyork.us/api/views/c3uy-2p5r/rows.csv?accessType=DOWNLOAD\"\nair_quality_df = pd.read_csv(url)\nair_quality_df.head()\n\n\n\n\n\n\n\n\nUnique ID\nIndicator ID\nName\nMeasure\nMeasure Info\nGeo Type Name\nGeo Join ID\nGeo Place Name\nTime Period\nStart_Date\nData Value\nMessage\n\n\n\n\n0\n336867\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n407\nFlushing and Whitestone (CD7)\nWinter 2014-15\n12/01/2014\n23.97\nNaN\n\n\n1\n336741\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n107\nUpper West Side (CD7)\nWinter 2014-15\n12/01/2014\n27.42\nNaN\n\n\n2\n550157\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n414\nRockaway and Broad Channel (CD14)\nAnnual Average 2017\n01/01/2017\n12.55\nNaN\n\n\n3\n412802\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n407\nFlushing and Whitestone (CD7)\nWinter 2015-16\n12/01/2015\n22.63\nNaN\n\n\n4\n412803\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n407\nFlushing and Whitestone (CD7)\nSummer 2016\n06/01/2016\n14.00\nNaN\n\n\n\n\n\n\n\nCreate a model to represent a row of data:\n\nclass AirQuality(BaseModel):\n    \"\"\"An air quality measurement from the City of New York\"\"\"\n    model_config = ConfigDict(\n        coerce_numbers_to_str=True,\n        alias_generator = lambda x: x.replace('_',' ').title(),\n        \n    )\n    \n    unique_id: str = Field(alias='Unique ID')\n    indicator_id: str = Field(alias='Indicator ID')\n    name: str\n    measure: str\n    measure_info: str\n    geo_type_name: str\n    geo_join_id: Optional[int] = Field(alias='Geo Join ID')\n    geo_place_name: Optional[str]    \n    time_period: str\n    start_date: Annotated[\n        dt.date,\n        BeforeValidator(lambda x: dt.datetime.strptime(x,\"%m/%d/%Y\"))\n    ] = Field(alias='Start_Date')\n    data_value: float\n\n\nAirQuality.model_validate(\n    air_quality_df.to_dict('records')[0]\n)\n\n\n\n\nunique_id\n336867\n\n\nindicator_id\n375\n\n\nname\nNitrogen dioxide (NO2)\n\n\nmeasure\nMean\n\n\nmeasure_info\nppb\n\n\ngeo_type_name\nCD\n\n\ngeo_join_id\n407\n\n\ngeo_place_name\nFlushing and Whitestone (CD7)\n\n\ntime_period\nWinter 2014-15\n\n\nstart_date\n2014-12-01\n\n\ndata_value\n23.97\n\n\n\n\n\n\nimport numpy as np\n\n\nclass AirQualityData(DataModel[AirQuality]):\n    \"\"\"Air quality measurements from the City of New York.\"\"\"\n    source: str = \"https://data.cityofnewyork.us/api/views/c3uy-2p5r/rows.csv?accessType=DOWNLOAD\"\n    accessed_at: dt.datetime = Field(default_factory=dt.datetime.now)\n\n    def __init__(\n        self,\n        source:str = \"https://data.cityofnewyork.us/api/views/c3uy-2p5r/rows.csv?accessType=DOWNLOAD\",\n    ):\n        \n        data = pd.read_csv(source)\n        super().__init__(\n            source=source,\n            data = data.replace(np.nan,None).to_dict('records')\n        )\n\n\nair_quality = AirQualityData()\nair_quality\n\ntitle: AirQualityData\ndescription: Air quality measurements from the City of New York.\nsource: https://data.cityofnewyork.us/api/views/c3uy-2p5r/rows.csv?accessType=DOWNLOADaccessed_at: 2025-06-02 14:43:29.947960DataFrame: \n\n\n\n\n\n\nunique_id\nindicator_id\nname\nmeasure\nmeasure_info\ngeo_type_name\ngeo_join_id\ngeo_place_name\ntime_period\nstart_date\ndata_value\n\n\n\n\n0\n336867\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n407\nFlushing and Whitestone (CD7)\nWinter 2014-15\n2014-12-01\n23.97\n\n\n1\n336741\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n107\nUpper West Side (CD7)\nWinter 2014-15\n2014-12-01\n27.42\n\n\n2\n550157\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n414\nRockaway and Broad Channel (CD14)\nAnnual Average 2017\n2017-01-01\n12.55\n\n\n3\n412802\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n407\nFlushing and Whitestone (CD7)\nWinter 2015-16\n2015-12-01\n22.63\n\n\n4\n412803\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n407\nFlushing and Whitestone (CD7)\nSummer 2016\n2016-06-01\n14.0\n\n\n\n\n\n\n\n\nair_quality.data[0]\n\n\n\n\nunique_id\n336867\n\n\nindicator_id\n375\n\n\nname\nNitrogen dioxide (NO2)\n\n\nmeasure\nMean\n\n\nmeasure_info\nppb\n\n\ngeo_type_name\nCD\n\n\ngeo_join_id\n407\n\n\ngeo_place_name\nFlushing and Whitestone (CD7)\n\n\ntime_period\nWinter 2014-15\n\n\nstart_date\n2014-12-01\n\n\ndata_value\n23.97\n\n\n\n\n\n\ndisplay(air_quality.to_dataframe(by_alias=True).head(2))\nair_quality.to_dataframe(by_alias=False).head(2)\n\n\n\n\n\n\n\n\nUnique ID\nIndicator ID\nName\nMeasure\nMeasure Info\nGeo Type Name\nGeo Join ID\nGeo Place Name\nTime Period\nStart_Date\nData Value\n\n\n\n\n0\n336867\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n407\nFlushing and Whitestone (CD7)\nWinter 2014-15\n2014-12-01\n23.97\n\n\n1\n336741\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n107\nUpper West Side (CD7)\nWinter 2014-15\n2014-12-01\n27.42\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nunique_id\nindicator_id\nname\nmeasure\nmeasure_info\ngeo_type_name\ngeo_join_id\ngeo_place_name\ntime_period\nstart_date\ndata_value\n\n\n\n\n0\n336867\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n407\nFlushing and Whitestone (CD7)\nWinter 2014-15\n2014-12-01\n23.97\n\n\n1\n336741\n375\nNitrogen dioxide (NO2)\nMean\nppb\nCD\n107\nUpper West Side (CD7)\nWinter 2014-15\n2014-12-01\n27.42",
    "crumbs": [
      "Resume",
      "models"
    ]
  },
  {
    "objectID": "projects/treasury bonds.html",
    "href": "projects/treasury bonds.html",
    "title": "Treasury Marketable Securities",
    "section": "",
    "text": "Treasury marketable securities are debt instruments issued by the U.S. Department of the Treasury to finance the government’s operations and obligations. They are backed by the full faith and credit of the U.S. Government.\nA security is a financial tool that represents value other than cash. The most common examples are stocks and bonds. Treasury securities are like bonds in that they are debt instruments that represent money borrowed. In return, the borrower promises to pay back the money at a future date, often with interest. Think of it as lending money to someone who will pay you back later, plus a little extra. ‘Marketable’ means that they can be bought and sold after they are originally issued.\nFor the government, treasury securities are a key tool to raise funds to cover budget deficits, pay for infrastructure, defense, social programs, and other federal expenditures. They enable the government to finance deficits, ensuring it can meet its spending commitments without needing to raise taxes or cut services. They’re also a monetary policy tool. These securities in the open market to control the money supply and interest rates, thereby influencing economic activity. This is part of the Fed’s open market operations.\nFor the investors that buy them, treasury securities offer a safe investment that is highly liquid, meaning it can easily be bought and sold. During periods of economic uncertainty or market volatility, investors flock to Treasuries for safety. This keeps demand high, particularly in global financial markets. The issuance and trading of Treasury securities reflect government fiscal policy and can influence market perceptions about economic health, debt sustainability, and inflation expectations.",
    "crumbs": [
      "Resume",
      "projects",
      "Treasury Marketable Securities"
    ]
  },
  {
    "objectID": "projects/treasury bonds.html#intro",
    "href": "projects/treasury bonds.html#intro",
    "title": "Treasury Marketable Securities",
    "section": "",
    "text": "Treasury marketable securities are debt instruments issued by the U.S. Department of the Treasury to finance the government’s operations and obligations. They are backed by the full faith and credit of the U.S. Government.\nA security is a financial tool that represents value other than cash. The most common examples are stocks and bonds. Treasury securities are like bonds in that they are debt instruments that represent money borrowed. In return, the borrower promises to pay back the money at a future date, often with interest. Think of it as lending money to someone who will pay you back later, plus a little extra. ‘Marketable’ means that they can be bought and sold after they are originally issued.\nFor the government, treasury securities are a key tool to raise funds to cover budget deficits, pay for infrastructure, defense, social programs, and other federal expenditures. They enable the government to finance deficits, ensuring it can meet its spending commitments without needing to raise taxes or cut services. They’re also a monetary policy tool. These securities in the open market to control the money supply and interest rates, thereby influencing economic activity. This is part of the Fed’s open market operations.\nFor the investors that buy them, treasury securities offer a safe investment that is highly liquid, meaning it can easily be bought and sold. During periods of economic uncertainty or market volatility, investors flock to Treasuries for safety. This keeps demand high, particularly in global financial markets. The issuance and trading of Treasury securities reflect government fiscal policy and can influence market perceptions about economic health, debt sustainability, and inflation expectations.",
    "crumbs": [
      "Resume",
      "projects",
      "Treasury Marketable Securities"
    ]
  },
  {
    "objectID": "projects/treasury bonds.html#data",
    "href": "projects/treasury bonds.html#data",
    "title": "Treasury Marketable Securities",
    "section": "Data",
    "text": "Data\nThe major types of Treasury marketable securities include: - Treasury Bills (T-Bills): Short-term securities that mature in one year or less. They are sold at a discount and do not pay interest but instead are redeemed at face value upon maturity. - Treasury Notes (T-Notes): Medium-term securities with maturities ranging from 2 to 10 years. These securities pay interest every six months. - Treasury Bonds (T-Bonds): Long-term securities with maturities of 20 to 30 years. They also pay interest every six months. - Treasury Inflation-Protected Securities (TIPS): Securities that provide protection against inflation. Their principal value adjusts based on changes in the Consumer Price Index (CPI), and they pay interest twice a year.\nWe’ll look at the underlying data provided by the Treasury to see if we can learn more about the economy as a whole.\n\nRequest\n\nA GET request to treasurydirect.gov\n\n\ndef securities_search(security_type):\n    url = 'http://www.treasurydirect.gov/TA_WS/securities/search'\n    params = {'type':'{}'.format(security_type)}\n    \n    r = requests.get(url,params)\n    return r.json()\n\nA quick preview:\n\nnotes = securities_search('Note') # &lt;-- returns a list of dictionaries \npd.DataFrame(notes[:5])\n\n\n\n\n\n\n\n\ncusip\nissueDate\nsecurityType\nsecurityTerm\nmaturityDate\ninterestRate\nrefCpiOnIssueDate\nrefCpiOnDatedDate\nannouncementDate\nauctionDate\n...\ntreasuryRetailTendersAccepted\ntype\nunadjustedAccruedInterestPer1000\nunadjustedPrice\nupdatedTimestamp\nxmlFilenameAnnouncement\nxmlFilenameCompetitiveResults\nxmlFilenameSpecialAnnouncement\ntintCusip1\ntintCusip2\n\n\n\n\n0\n91282CLM1\n2024-09-30T00:00:00\nNote\n7-Year\n2031-09-30T00:00:00\n\n\n\n2024-09-19T00:00:00\n2024-09-26T00:00:00\n...\nYes\nNote\n\n\n2024-09-19T11:02:43\nA_20240919_5.xml\n\n\n912834XZ6\n\n\n\n1\n91282CLN9\n2024-09-30T00:00:00\nNote\n5-Year\n2029-09-30T00:00:00\n\n\n\n2024-09-19T00:00:00\n2024-09-25T00:00:00\n...\nYes\nNote\n\n\n2024-09-19T11:40:24\nA_20240919_4.xml\n\n\n\n\n\n\n2\n91282CLP4\n2024-09-30T00:00:00\nNote\n2-Year\n2026-09-30T00:00:00\n\n\n\n2024-09-19T00:00:00\n2024-09-24T00:00:00\n...\nYes\nNote\n\n\n2024-09-19T11:02:28\nA_20240919_2.xml\n\n\n\n\n\n\n3\n91282CLF6\n2024-09-16T00:00:00\nNote\n9-Year 11-Month\n2034-08-15T00:00:00\n3.875000\n\n\n2024-09-05T00:00:00\n2024-09-11T00:00:00\n...\nYes\nNote\n\n\n2024-09-11T13:04:03\nA_20240905_1.xml\nR_20240911_2.xml\n\n\n\n\n\n4\n91282CLL3\n2024-09-16T00:00:00\nNote\n3-Year\n2027-09-15T00:00:00\n3.375000\n\n\n2024-09-05T00:00:00\n2024-09-10T00:00:00\n...\nYes\nNote\n\n\n2024-09-10T13:03:53\nA_20240905_6.xml\nR_20240910_2.xml\n\n912834XY9\n\n\n\n\n\n5 rows × 118 columns\n\n\n\n\n\nData Modeling\n\nall_data = dict(\n    notes = securities_search('Note'),\n    bonds = securities_search('Bond'),\n    tips = securities_search('TIPS'), # inflation protected securities \n    frn = securities_search('FRN'), # floating rate notes\n    bills = securities_search('Bill')\n)\n\n\ndf = pd.DataFrame(all_data['bonds'])\ndf['maturityDate'] = pd.to_datetime(df['maturityDate'])\ndf['issueDate'] = pd.to_datetime(df['issueDate'])\nfor c in ['interestRate','adjustedPrice','pricePer100','lowPrice','lowYield','highPrice','highYield']:\n    df[c]=pd.to_numeric(df[c])\n\n\n# Define face value (typically 100 for bonds)\nface_value = 100\n\n# Coupon Payment calculation\ndf['couponPayment'] = (df['interestRate'] / 100) * face_value\n\n# Years to maturity calculation\ndf['yearsToMaturity'] = (df['maturityDate'] - df['issueDate']).dt.days / 365\n\n# Calculate Gross Yield (YTM) approximation\ndf['YTM'] = (df['couponPayment'] + (face_value - df['pricePer100']) / df['yearsToMaturity']) / ((face_value + df['pricePer100']) / 2)\n\n# View the result\ndf[['cusip', 'issueDate', 'maturityDate', 'interestRate', 'adjustedPrice','pricePer100', 'couponPayment', 'yearsToMaturity', 'YTM']].head()\n\n\n\n\n\n\n\n\ncusip\nissueDate\nmaturityDate\ninterestRate\nadjustedPrice\npricePer100\ncouponPayment\nyearsToMaturity\nYTM\n\n\n\n\n0\n912810UD8\n2024-09-30\n2044-08-15\n4.125\nNaN\n101.159820\n4.125\n19.887671\n0.040432\n\n\n1\n912810UC0\n2024-09-16\n2054-08-15\n4.250\nNaN\n104.064869\n4.250\n29.931507\n0.040322\n\n\n2\n912810UD8\n2024-09-03\n2044-08-15\n4.125\nNaN\n99.524806\n4.125\n19.961644\n0.041587\n\n\n3\n912810UC0\n2024-08-15\n2054-08-15\n4.250\nNaN\n98.928757\n4.250\n30.019178\n0.043088\n\n\n4\n912810UB2\n2024-07-31\n2044-05-15\n4.625\nNaN\n102.062500\n4.625\n19.802740\n0.044747\n\n\n\n\n\n\n\n\ndf['pricePer100'].corr(df['YTM'])\n\n-0.049642087831047434",
    "crumbs": [
      "Resume",
      "projects",
      "Treasury Marketable Securities"
    ]
  },
  {
    "objectID": "arc_gis.html",
    "href": "arc_gis.html",
    "title": "arc_gis",
    "section": "",
    "text": "source\n\nget_arcgis_feature_service\n\n get_arcgis_feature_service (serviceName:str,\n                             webadaptor:str='VTyQ9soqVukalItT', **kwargs)\n\n*A feature service can contain datasets (for example, tables and views) with or without a spatial column. Datasets with a spatial column are considered layers; those without a spatial column are considered tables. A feature service allows clients to query and edit feature geometry and attributes.\nThis resource provides basic information about the feature service, including the feature layers and tables that it contains, the service description, and so on.*\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nserviceName\nstr\n\n\n\n\nwebadaptor\nstr\nVTyQ9soqVukalItT\ndefaults to HUD\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\n\nfrom IPython.display import HTML\n\n\ndisplay(HTML(get_arcgis_feature_service(\"Fair_Market_Rents\")['description']))\n\nFair Market Rents (FMRs) represent the estimated amount (base rent + essential utilities) that a property in a given area typically rents for. The data is primarily used to determine payment standard amounts for the Housing Choice Voucher program; however, FMRs are also used to:\n\nDetermine initial renewal rents for expiring project-based Section 8 contracts;\n\nDetermine initial rents for housing assistance payment (HAP) contracts in the Moderate Rehabilitation Single Room Occupancy program (Mod Rehab), rent ceilings for rental units in both the HOME Investment Partnerships program and the Emergency Solution Grants (ESG) program;\n\n\nCalculate of maximum award amounts for Continuum of Care recipients and the maximum amount of rent a recipient may pay for property leased with Continuum of Care funds, and;\n\n\nCalculate flat rent amounts in Public Housing Units.\n\n\nData is updated annualy in accordance with 42 USC 1437f which requires FMRs be posted at least 30 days before they are effective and that they are effective at the start of the federal fiscal year, October 1st.In order to calculate rents for units with more than four bedrooms, an extra 15% cost is added to the four bedroom unit value. The formula is to multiply the four bedroom rent by 1.15. For example, in FY21 the rent for a four bedroom unit in the El Centro, California Micropolitan Statistical Area is $1,444. The rent for a five bedroom unit would be $1,444 * 1.15 or $1,661. Each subsequent bedroom is an additional 15%. A six bedroom unit would be $1,444 * 1.3 or $1,877. These values are not included in the feature service.\n\n\n  To learn more about Fair Market Rents visit: https://www.huduser.gov/portal/datasets/fmr.html/\n  \n  \n  Data Dictionary: DD_Fair Market Rents\n\nDate of Coverage: FY2024 : Oct. 1 - Sept. 30\n\n\n\ndisplay(HTML(get_arcgis_feature_service(\"HUD_PDR_Small_Area_Fair_Market_Rents\")['description']))\n\n\nSmall Area Fair Market Rents (SAFMRs) are FMRs calculated for ZIP Codes within Metropolitan Areas. Small Area FMRs are required to be used to set Section 8 Housing Choice Voucher payment standards in areas designated by HUD (available here). Other Housing Agencies operating in non-designated metropolitan areas may opt-in to the use of Small Area FMRs. Furthermore, Small Area FMRs may be used as the basis for setting Exception Payment Standards – PHAs may set exception payment standards up to 110 percent of the Small Area FMR. PHAs administering Public Housing units may use Small Area FMRs as an alternative to metropolitan area-wide FMRs when calculating Flat Rents. Please See HUD’s Small Area FMR Final Rule for additional information regarding the uses of Small Area FMRs.Note that this service does not denote precise SAFMR geographies. Instead, the service utilizes a relationship class to associate the information for each SAFMR with the FMR areas that its ZCTA overlaps. For example, ZCTA 94558 overlaps the Santa Rosa, Napa, and Vallejo-Fairfield MSAs. Selecting that ZCTA will reveal the SAFMR information associated with each FMR area.  \n\n\n    \n        To learn more about the Small Area Fair Market Rents visit: https://www.huduser.gov/portal/datasets/fmr/smallarea/index.html, for questions about the spatial attribution of this dataset, please reach out to us at GISHelpdesk@hud.gov. Date of Coverage: Fiscal Year 2025Date Update: 01/2025\n\n\n\nsource\n\n\nget_arcgis_layer\n\n get_arcgis_layer (serviceName, layerId:int=0,\n                   webadaptor:str='VTyQ9soqVukalItT', **kwargs)\n\n*The layer resource represents a single feature layer or a nonspatial table in a feature service. A feature layer is a table or view with at least one spatial column.\nFor tables, it provides basic information about the table such as its ID, name, fields, types, and templates. For feature layers, in addition to the table information, it provides information such as its geometry type, min and max scales, and spatial reference. Each type includes information about the type, such as the type ID, name, and definition expression. Types also include a default symbol and a list of feature templates. Each feature template includes a template name, description, and prototypical feature.\n(source)[https://developers.arcgis.com/rest/services-reference/enterprise/layer-feature-service-.htm]*\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nserviceName\n\n\n\n\n\nlayerId\nint\n0\n\n\n\nwebadaptor\nstr\nVTyQ9soqVukalItT\ndefaults to HUD\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\n\nsource\n\n\nget_arcgis_layer_last_updated\n\n get_arcgis_layer_last_updated (serviceName, layerId=0,\n                                webadaptor:str='VTyQ9soqVukalItT',\n                                **kwargs)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nserviceName\n\n\n\n\n\nlayerId\nint\n0\n\n\n\nwebadaptor\nstr\nVTyQ9soqVukalItT\ndefaults to HUD\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\n\nget_arcgis_layer_last_updated(\"Proposed_Housing_Authority_Service_Areas\",15)\n\nTimestamp('2024-01-04 16:29:36.912000')\n\n\n\nfor service in (\n    \"Proposed_Housing_Authority_Service_Areas\",\n    'HUD_PDR_Small_Area_Fair_Market_Rents',\n    \n):\n    for layer in get_arcgis_feature_service(service)['layers']:\n        print(f\"{layer['name']}: updated {get_arcgis_layer_last_updated(service,layer['id'])}\")\n\nEstimated_Housing_Authority_Service_Areas: updated 2024-01-04 16:29:36.912000\nSAFMR_Zip_Code_Tab_Areas: updated 2025-04-02 20:29:25.309000\n\n\n\nservice = get_arcgis_feature_service('HUD_PDR_Small_Area_Fair_Market_Rents')\nservice['layers']\n\n[{'id': 2,\n  'name': 'SAFMR_Zip_Code_Tab_Areas',\n  'parentLayerId': -1,\n  'defaultVisibility': True,\n  'subLayerIds': None,\n  'minScale': 0,\n  'maxScale': 0,\n  'type': 'Feature Layer',\n  'geometryType': 'esriGeometryPolygon'}]\n\n\n\nsource\n\n\nget_arcgis_query\n\n get_arcgis_query (serviceName:str, layerId:int=0,\n                   webadaptor:str='VTyQ9soqVukalItT',\n                   limit:Optional[int]=None, where:str='1=1',\n                   f:str='geojson', **kwargs)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nserviceName\nstr\n\n\n\n\nlayerId\nint\n0\n\n\n\nwebadaptor\nstr\nVTyQ9soqVukalItT\ndefaults to HUD\n\n\nlimit\nOptional\nNone\n\n\n\nwhere\nstr\n1=1\n\n\n\nf\nstr\ngeojson\n\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\nReturns\ndict\n\n\n\n\n\n\nq = get_arcgis_query(\n    serviceName='HUD_PDR_Small_Area_Fair_Market_Rents',\n    layer=2,\n    limit=5\n)\nlen(q['features'])\n\n5",
    "crumbs": [
      "Resume",
      "arc_gis"
    ]
  },
  {
    "objectID": "baseball.html",
    "href": "baseball.html",
    "title": "Baseball",
    "section": "",
    "text": "from humble_chuck.models import BaseModel\nfrom pydantic import ConfigDict\nfrom enum import Enum\nimport statsapi as mlb\nimport datetime as dt\nfrom typing import *\ndef get_season_games(season: int) -&gt; List[dict]:\n    \"\"\"get mlb games for a given season\"\"\"\n    season = mlb.get('season',{'sportId':1,'seasonId':season})['seasons'][0]\n    start = season['seasonStartDate']\n    end = season['seasonEndDate']\n    schedule = mlb.get(\n        endpoint='schedule',\n        params={'startDate':start,'endDate':end,'sportId':1}\n    )\n\n    pks = [\n        game for dates in schedule['dates'] for game in dates['games'] \n    ]\n    \n    \n    return pks\ngames_2024 = get_season_games(2024)\ngames_2024[-1].keys()\n\ndict_keys(['gamePk', 'gameGuid', 'link', 'gameType', 'season', 'gameDate', 'officialDate', 'status', 'teams', 'venue', 'content', 'isTie', 'gameNumber', 'publicFacing', 'doubleHeader', 'gamedayType', 'tiebreaker', 'calendarEventID', 'seasonDisplay', 'dayNight', 'description', 'scheduledInnings', 'reverseHomeAwayStatus', 'inningBreakLength', 'gamesInSeries', 'seriesGameNumber', 'seriesDescription', 'recordSource', 'ifNecessary', 'ifNecessaryDescription'])\nQuick check to see how we can filter for finished games\n{g['status']['detailedState'] for g in games_2024}\n\n{'Cancelled', 'Completed Early', 'Final', 'Postponed'}\ncompleted_games = [g for g in games_2024 if g['status']['detailedState']=='Final']\nlen(completed_games)\n\n2935",
    "crumbs": [
      "Resume",
      "Baseball"
    ]
  },
  {
    "objectID": "baseball.html#game-response",
    "href": "baseball.html#game-response",
    "title": "Baseball",
    "section": "Game Response",
    "text": "Game Response\n\ngame = mlb.get('game',{'gamePk':'748266'})\ngame.keys()\n\ndict_keys(['copyright', 'gamePk', 'link', 'metaData', 'gameData', 'liveData'])\n\n\n\ngame['metaData']\n\n{'wait': 10,\n 'timeStamp': '20240222_231445',\n 'gameEvents': ['strikeout', 'game_finished'],\n 'logicalEvents': ['midInning',\n  'countChange',\n  'count03',\n  'gameStateChangeToGameOver']}\n\n\n\nclass GameResponseBase(BaseModel):\n    \n    copyright: str\n    gamePk: int\n    link: str\n\n\nGameResponseBase.model_validate(game)\n\n\n\n\ncopyright\nCopyright 2025 MLB Advanced Media, L.P. Use of any content on this page acknowledges agreement to the terms posted here http://gdx.mlb.com/components/copyright.txt\n\n\ngamePk\n748266\n\n\nlink\n/api/v1.1/game/748266/feed/live\n\n\n\n\n\n\ngame['liveData'].keys()\n\ndict_keys(['plays', 'linescore', 'boxscore', 'decisions', 'leaders'])",
    "crumbs": [
      "Resume",
      "Baseball"
    ]
  },
  {
    "objectID": "baseball.html#game-data",
    "href": "baseball.html#game-data",
    "title": "Baseball",
    "section": "Game Data",
    "text": "Game Data\n\ngameData = game['gameData']\nprint(gameData.keys())\n\ndict_keys(['game', 'datetime', 'status', 'teams', 'players', 'venue', 'officialVenue', 'weather', 'gameInfo', 'review', 'flags', 'alerts', 'probablePitchers', 'officialScorer', 'primaryDatacaster', 'moundVisits'])\n\n\n\nmlb.get(\n    'meta',\n    params={\n        'type':'gameTypes'\n    }\n)\n\n[{'id': 'S', 'description': 'Spring Training'},\n {'id': 'R', 'description': 'Regular Season'},\n {'id': 'F', 'description': 'Wild Card'},\n {'id': 'D', 'description': 'Division Series'},\n {'id': 'L', 'description': 'League Championship Series'},\n {'id': 'W', 'description': 'World Series'},\n {'id': 'C', 'description': 'Championship'},\n {'id': 'N', 'description': 'Nineteenth Century Series'},\n {'id': 'P', 'description': 'Playoffs'},\n {'id': 'A', 'description': 'All-Star Game'},\n {'id': 'I', 'description': 'Intrasquad'},\n {'id': 'E', 'description': 'Exhibition'}]\n\n\n\ngameday_types = mlb.get(\n    'meta',\n    params={\n        'type':'gamedayTypes'\n    }\n)\ngameday_types\n{x['code']: x['description'] for x in gameday_types}\n\n{'P': 'Premium Gameday - 3D Pitch tracking and Premium product experience',\n 'E': 'Enhanced Gameday - 3D Pitch tracking',\n 'Y': 'Regular Gameday - Pitch by Pitch',\n 'D': 'No Gameday - Pitch by Pitch',\n 'N': 'No Gameday - Play by Play level data only',\n 'L': 'No Gameday - Linescore level data',\n 'B': 'No Gameday - PG / Box Score level data only',\n 'S': 'No Gameday - Score / Game Result level data only'}\n\n\n\nsource\n\nGame\n\n Game (pk:int, type:__main__.GameType, doubleHeader:bool, id:str,\n       gamedayType:__main__.GameDayType, tiebreaker:bool, gameNumber:int,\n       calendarEventID:str, season:str, seasonDisplay:str)\n\n*Model for GameData -&gt; Game Response**\nFields:\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\npk\ninteger\nTrue\n\n\n\n\ntype\nGameType\nTrue\n-\n(Nested Model)\n\n\ndoubleHeader\nboolean\nTrue\n\n\n\n\nid\nstring\nTrue\n\n\n\n\ngamedayType\nGameDayType\nTrue\n-\n(Nested Model)\n\n\ntiebreaker\nboolean\nTrue\n\n\n\n\ngameNumber\ninteger\nTrue\n\n\n\n\ncalendarEventID\nstring\nTrue\n\n\n\n\nseason\nstring\nTrue\n\n\n\n\nseasonDisplay\nstring\nTrue\n\n\n\n\n\n$defs → GameDayType\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\n\n$defs → GameType\n\n\n\nName\nType\nRequired\nDefault\nDescription\n\n\n\n\n\n\ngame_eg = gameData['game']\ngame_eg\n\n{'pk': 748266,\n 'type': 'S',\n 'doubleHeader': 'N',\n 'id': '2024/02/22/lanmlb-sdnmlb-1',\n 'gamedayType': 'N',\n 'tiebreaker': 'N',\n 'gameNumber': 1,\n 'calendarEventID': '14-748266-2024-02-22',\n 'season': '2024',\n 'seasonDisplay': '2024'}\n\n\n\ngame_validated = Game.model_validate(game_eg)\ngame_validated\n\n\n\n\npk\n748266\n\n\ntype\nS\n\n\ndoubleHeader\nFalse\n\n\nid\n2024/02/22/lanmlb-sdnmlb-1\n\n\ngamedayType\nN\n\n\ntiebreaker\nFalse\n\n\ngameNumber\n1\n\n\ncalendarEventID\n14-748266-2024-02-22\n\n\nseason\n2024\n\n\nseasonDisplay\n2024\n\n\n\n\n\n\ngame_validated.type.description\n\n'Spring Training'\n\n\n\ngame_validated.gamedayType.description\n\n'No Gameday - Play by Play level data only'\n\n\n\ngame.keys()\n\ndict_keys(['copyright', 'gamePk', 'link', 'metaData', 'gameData', 'liveData'])",
    "crumbs": [
      "Resume",
      "Baseball"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Humble Chuck",
    "section": "",
    "text": "I’m a software developer and problem solver with a strong focus on Python and data-driven solutions. From building custom tools for data visualization to optimizing real estate investment strategies with complex calculations like levered IRR, I love finding creative, efficient ways to tackle challenges. I have a deep interest in coding, cloud technology, and real estate analytics, and I’m constantly learning new ways to improve workflows and outcomes.\nOutside of my work in tech, I’m a lifelong musician. I studied jazz performance at NYU, and co-founded the band Del Water Gap. I’ve performed with Maggie Rogers and have been gigging in NYC since I was 16, balancing my passion for music with my love for coding and problem-solving.\nI’m particularly interested in open-source development and using notebooks as a way to document my thought process. NBDev lets me iterate quickly while keeping the codebase well organized.\nI made this site using NBDev",
    "crumbs": [
      "Resume",
      "Humble Chuck"
    ]
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Humble Chuck",
    "section": "",
    "text": "I’m a software developer and problem solver with a strong focus on Python and data-driven solutions. From building custom tools for data visualization to optimizing real estate investment strategies with complex calculations like levered IRR, I love finding creative, efficient ways to tackle challenges. I have a deep interest in coding, cloud technology, and real estate analytics, and I’m constantly learning new ways to improve workflows and outcomes.\nOutside of my work in tech, I’m a lifelong musician. I studied jazz performance at NYU, and co-founded the band Del Water Gap. I’ve performed with Maggie Rogers and have been gigging in NYC since I was 16, balancing my passion for music with my love for coding and problem-solving.\nI’m particularly interested in open-source development and using notebooks as a way to document my thought process. NBDev lets me iterate quickly while keeping the codebase well organized.\nI made this site using NBDev",
    "crumbs": [
      "Resume",
      "Humble Chuck"
    ]
  },
  {
    "objectID": "index.html#about-the-code",
    "href": "index.html#about-the-code",
    "title": "Humble Chuck",
    "section": "About the Code",
    "text": "About the Code\nThis repository contains a collection of small modules that demonstrate my approach to building reusable tools.\n\ndelegation – share function parameters with a decorator\ndependency – lightweight dependency management with Pydantic\nmulti_enum – enumerations with multiple aliases\ndatabase – SQLAlchemy helpers configured via Pydantic models\ndisplay – utilities for Plotly and Pydantic documentation\narc_gis – simple wrappers around the ArcGIS API\nbaseball – modeling responses from the MLB Stats API\n\nEach module begins life in a notebook and is exported with nbdev, providing an example of how I iterate on ideas and keep my code organized.",
    "crumbs": [
      "Resume",
      "Humble Chuck"
    ]
  }
]